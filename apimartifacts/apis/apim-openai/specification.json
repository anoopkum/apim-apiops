{
  "swagger": "2.0",
  "info": {
    "title": "apim-openai",
    "version": "1.0",
    "description": "Azure OpenAI APIs for completions and search"
  },
  "host": "apim-demo-dib.azure-api.net",
  "basePath": "/apim-openai",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "api-key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "paths": {
    "/deployments/{deployment-id}/completions": {
      "post": {
        "description": "Creates a completion for the provided prompt, parameters and chosen model.",
        "operationId": "Completions_Create",
        "summary": "Creates a completion for the provided prompt, parameters and chosen model.",
        "parameters": [
          {
            "name": "deployment-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployments-deployment-id-CompletionsPostRequest-2",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Deployments-deployment-id-CompletionsPostRequest-2"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "apim-request-id": {
                "type": "string",
                "description": "Request ID for troubleshooting purposes"
              }
            },
            "schema": {
              "$ref": "#/definitions/DeploymentsDeployment-idCompletionsPost200ApplicationJsonResponse"
            },
            "examples": {
              "application/json": {
                "model": "davinci",
                "object": "text_completion",
                "id": "cmpl-4509KAos68kxOqpE2uYGw81j6m7uo",
                "created": 1637097562,
                "choices": [
                  {
                    "index": 0,
                    "text": "The price for bubblegum decreased on thursday.",
                    "logprobs": null,
                    "finish_reason": "stop"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Service unavailable",
            "headers": {
              "apim-request-id": {
                "type": "string",
                "description": "Request ID for troubleshooting purposes"
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "param": "string",
                  "type": "string",
                  "inner_error": {
                    "code": "ResponsibleAIPolicyViolation",
                    "content_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "profanity": {
                        "filtered": true,
                        "detected": true
                      },
                      "custom_blocklists": [
                        {
                          "filtered": true,
                          "id": "string"
                        }
                      ],
                      "error": {
                        "code": "string",
                        "message": "string"
                      },
                      "jailbreak": {
                        "filtered": true,
                        "detected": true
                      }
                    }
                  },
                  "code": "string",
                  "message": "string"
                }
              }
            }
          },
          "500": {
            "description": "Service unavailable",
            "headers": {
              "apim-request-id": {
                "type": "string",
                "description": "Request ID for troubleshooting purposes"
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "param": "string",
                  "type": "string",
                  "inner_error": {
                    "code": "ResponsibleAIPolicyViolation",
                    "content_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "profanity": {
                        "filtered": true,
                        "detected": true
                      },
                      "custom_blocklists": [
                        {
                          "filtered": true,
                          "id": "string"
                        }
                      ],
                      "error": {
                        "code": "string",
                        "message": "string"
                      },
                      "jailbreak": {
                        "filtered": true,
                        "detected": true
                      }
                    }
                  },
                  "code": "string",
                  "message": "string"
                }
              }
            }
          }
        }
      }
    },
    "/deployments/{deployment-id}/embeddings": {
      "post": {
        "description": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.",
        "operationId": "embeddings_create",
        "summary": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.",
        "parameters": [
          {
            "name": "deployment-id",
            "in": "path",
            "description": "The deployment id of the model which was deployed.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployments-deployment-id-EmbeddingsPostRequest-2",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Deployments-deployment-id-EmbeddingsPostRequest-2"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeploymentsDeployment-idEmbeddingsPost200ApplicationJsonResponse"
            },
            "examples": {
              "application/json": {
                "object": "string",
                "model": "string",
                "data": [
                  {
                    "index": 0,
                    "object": "string",
                    "embedding": [
                      0.0
                    ]
                  }
                ],
                "usage": {
                  "prompt_tokens": 0,
                  "total_tokens": 0
                }
              }
            }
          }
        }
      }
    },
    "/deployments/{deployment-id}/chat/completions": {
      "post": {
        "description": "Creates a completion for the chat message",
        "operationId": "ChatCompletions_Create",
        "summary": "Creates a completion for the chat message",
        "parameters": [
          {
            "name": "deployment-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "createChatCompletionRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createChatCompletionRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "apim-request-id": {
                "type": "string",
                "description": "Request ID for troubleshooting purposes"
              }
            },
            "schema": {
              "$ref": "#/definitions/createChatCompletionResponse"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "chat.completion",
                "created": 0,
                "model": "string",
                "usage": {
                  "prompt_tokens": 0,
                  "completion_tokens": 0,
                  "total_tokens": 0
                },
                "system_fingerprint": "string",
                "prompt_filter_results": [
                  {
                    "prompt_index": 0,
                    "content_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "profanity": {
                        "filtered": true,
                        "detected": true
                      },
                      "custom_blocklists": [
                        {
                          "filtered": true,
                          "id": "string"
                        }
                      ],
                      "error": {
                        "code": "string",
                        "message": "string"
                      },
                      "jailbreak": {
                        "filtered": true,
                        "detected": true
                      }
                    }
                  }
                ],
                "choices": [
                  {
                    "index": 0,
                    "finish_reason": "string",
                    "message": {
                      "role": "assistant",
                      "content": "string",
                      "tool_calls": [
                        {
                          "id": "string",
                          "type": "function",
                          "function": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "function_call": {
                        "name": "string",
                        "arguments": "string"
                      },
                      "context": {
                        "citations": [
                          {
                            "content": "string",
                            "title": "string",
                            "url": "string",
                            "filepath": "string",
                            "chunk_id": "string"
                          }
                        ],
                        "intent": "string"
                      }
                    },
                    "content_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "profanity": {
                        "filtered": true,
                        "detected": true
                      },
                      "custom_blocklists": [
                        {
                          "filtered": true,
                          "id": "string"
                        }
                      ],
                      "error": {
                        "code": "string",
                        "message": "string"
                      },
                      "protected_material_text": {
                        "filtered": true,
                        "detected": true
                      },
                      "protected_material_code": {
                        "filtered": true,
                        "detected": true,
                        "citation": {
                          "URL": "string",
                          "license": "string"
                        }
                      }
                    },
                    "logprobs": {
                      "content": [
                        {
                          "token": "string",
                          "logprob": 0.0,
                          "bytes": [
                            0
                          ],
                          "top_logprobs": [
                            {
                              "token": "string",
                              "logprob": 0.0,
                              "bytes": [
                                0
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "enhancements": {
                      "grounding": {
                        "lines": [
                          {
                            "text": "string",
                            "spans": [
                              {
                                "text": "string",
                                "offset": 0,
                                "length": 0,
                                "polygon": [
                                  {
                                    "x": 0.0,
                                    "y": 0.0
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Service unavailable",
            "headers": {
              "apim-request-id": {
                "type": "string",
                "description": "Request ID for troubleshooting purposes"
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "param": "string",
                  "type": "string",
                  "inner_error": {
                    "code": "ResponsibleAIPolicyViolation",
                    "content_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "profanity": {
                        "filtered": true,
                        "detected": true
                      },
                      "custom_blocklists": [
                        {
                          "filtered": true,
                          "id": "string"
                        }
                      ],
                      "error": {
                        "code": "string",
                        "message": "string"
                      },
                      "jailbreak": {
                        "filtered": true,
                        "detected": true
                      }
                    }
                  },
                  "code": "string",
                  "message": "string"
                }
              }
            }
          },
          "500": {
            "description": "Service unavailable",
            "headers": {
              "apim-request-id": {
                "type": "string",
                "description": "Request ID for troubleshooting purposes"
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "param": "string",
                  "type": "string",
                  "inner_error": {
                    "code": "ResponsibleAIPolicyViolation",
                    "content_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "profanity": {
                        "filtered": true,
                        "detected": true
                      },
                      "custom_blocklists": [
                        {
                          "filtered": true,
                          "id": "string"
                        }
                      ],
                      "error": {
                        "code": "string",
                        "message": "string"
                      },
                      "jailbreak": {
                        "filtered": true,
                        "detected": true
                      }
                    }
                  },
                  "code": "string",
                  "message": "string"
                }
              }
            }
          }
        }
      }
    },
    "/deployments/{deployment-id}/audio/transcriptions": {
      "post": {
        "description": "Transcribes audio into the input language.",
        "operationId": "Transcriptions_Create",
        "summary": "Transcribes audio into the input language.",
        "parameters": [
          {
            "name": "deployment-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "prompt",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "response_format",
            "in": "formData",
            "description": "AudioResponseFormat",
            "type": "string",
            "enum": [
              "json",
              "text",
              "srt",
              "verbose_json",
              "vtt"
            ]
          },
          {
            "name": "temperature",
            "in": "formData",
            "type": "number",
            "default": 0.0
          },
          {
            "name": "language",
            "in": "formData",
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeploymentsDeployment-idAudioTranscriptionsPost200TextPlainResponse"
            },
            "examples": {
              "application/json": {
                "text": "string"
              }
            }
          }
        }
      }
    },
    "/deployments/{deployment-id}/audio/translations": {
      "post": {
        "description": "Transcribes and translates input audio into English text.",
        "operationId": "Translations_Create",
        "summary": "Transcribes and translates input audio into English text.",
        "parameters": [
          {
            "name": "deployment-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "prompt",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "response_format",
            "in": "formData",
            "description": "AudioResponseFormat",
            "type": "string",
            "enum": [
              "json",
              "text",
              "srt",
              "verbose_json",
              "vtt"
            ]
          },
          {
            "name": "temperature",
            "in": "formData",
            "type": "number",
            "default": 0.0
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeploymentsDeployment-idAudioTranslationsPost200TextPlainResponse"
            },
            "examples": {
              "application/json": {
                "text": "string"
              }
            }
          }
        }
      }
    },
    "/deployments/{deployment-id}/audio/speech": {
      "post": {
        "description": "Generates audio from the input text.",
        "operationId": "Speech_Create",
        "summary": "Generates audio from the input text.",
        "parameters": [
          {
            "name": "deployment-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "in": "formData",
            "type": "string"
          },
          {
            "name": "voice",
            "in": "formData",
            "type": "string",
            "enum": [
              "alloy",
              "echo",
              "fable",
              "onyx",
              "nova",
              "shimmer"
            ]
          },
          {
            "name": "response_format",
            "in": "formData",
            "type": "string",
            "enum": [
              "mp3",
              "opus",
              "aac",
              "flac"
            ]
          },
          {
            "name": "speed",
            "in": "formData",
            "type": "number",
            "default": 1.0
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeploymentsDeployment-idAudioSpeechPost200ApplicationOctet-streamResponse"
            }
          }
        }
      }
    },
    "/deployments/{deployment-id}/images/generations": {
      "post": {
        "description": "Generates a batch of images from a text caption on a given DALLE model deployment",
        "operationId": "ImageGenerations_Create",
        "summary": "Generates a batch of images from a text caption on a given DALLE model deployment",
        "parameters": [
          {
            "name": "deployment-id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageGenerationsRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/imageGenerationsRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/generateImagesResponse"
            },
            "examples": {
              "application/json": {
                "created": "1676540381",
                "data": [
                  {
                    "url": "https://www.contoso.com",
                    "b64_json": "string",
                    "content_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      }
                    },
                    "revised_prompt": "string",
                    "prompt_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "profanity": {
                        "filtered": true,
                        "detected": true
                      },
                      "jailbreak": {
                        "filtered": true,
                        "detected": true
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "An error occurred.",
            "schema": {
              "$ref": "#/definitions/dalleErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "param": "string",
                  "type": "string",
                  "inner_error": {
                    "code": "ResponsibleAIPolicyViolation",
                    "content_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "profanity": {
                        "filtered": true,
                        "detected": true
                      },
                      "jailbreak": {
                        "filtered": true,
                        "detected": true
                      }
                    },
                    "revised_prompt": "string"
                  },
                  "code": "string",
                  "message": "string"
                }
              }
            }
          },
          "500": {
            "description": "An error occurred.",
            "schema": {
              "$ref": "#/definitions/dalleErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "param": "string",
                  "type": "string",
                  "inner_error": {
                    "code": "ResponsibleAIPolicyViolation",
                    "content_filter_results": {
                      "sexual": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "violence": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "hate": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "self_harm": {
                        "filtered": true,
                        "severity": "safe"
                      },
                      "profanity": {
                        "filtered": true,
                        "detected": true
                      },
                      "jailbreak": {
                        "filtered": true,
                        "detected": true
                      }
                    },
                    "revised_prompt": "string"
                  },
                  "code": "string",
                  "message": "string"
                }
              }
            }
          }
        }
      }
    },
    "/assistants": {
      "get": {
        "description": "Returns a list of assistants.",
        "operationId": "List_Assistants",
        "summary": "Returns a list of assistants.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "type": "integer",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/listAssistantsResponse"
            },
            "examples": {
              "application/json": {
                "object": "list",
                "data": [
                  {
                    "id": "string",
                    "object": "assistant",
                    "created_at": 0,
                    "name": "string",
                    "description": "string",
                    "model": "string",
                    "instructions": "string",
                    "tools": [
                      {
                        "type": "code_interpreter"
                      }
                    ],
                    "file_ids": [
                      "string"
                    ],
                    "metadata": {}
                  }
                ],
                "first_id": "string",
                "last_id": "string",
                "has_more": false
              }
            }
          }
        }
      },
      "post": {
        "description": "Create an assistant with a model and instructions.",
        "operationId": "Create_Assistant",
        "summary": "Create an assistant with a model and instructions.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "createAssistantRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createAssistantRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/assistantObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "assistant",
                "created_at": 0,
                "name": "string",
                "description": "string",
                "model": "string",
                "instructions": "string",
                "tools": [
                  {
                    "type": "code_interpreter"
                  }
                ],
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/assistants/{assistant_id}": {
      "get": {
        "description": "Retrieves an assistant.",
        "operationId": "Get_Assistant",
        "summary": "Retrieves an assistant.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "description": "The ID of the assistant to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/assistantObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "assistant",
                "created_at": 0,
                "name": "string",
                "description": "string",
                "model": "string",
                "instructions": "string",
                "tools": [
                  {
                    "type": "code_interpreter"
                  }
                ],
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      },
      "post": {
        "description": "Modifies an assistant.",
        "operationId": "Modify_Assistant",
        "summary": "Modifies an assistant.",
        "tags": [
          "Assistant"
        ],
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "description": "The ID of the assistant to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "modifyAssistantRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/modifyAssistantRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/assistantObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "assistant",
                "created_at": 0,
                "name": "string",
                "description": "string",
                "model": "string",
                "instructions": "string",
                "tools": [
                  {
                    "type": "code_interpreter"
                  }
                ],
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an assistant.",
        "operationId": "Delete_Assistant",
        "summary": "Delete an assistant.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "description": "The ID of the assistant to delete.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deleteAssistantResponse"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "deleted": true,
                "object": "assistant.deleted"
              }
            }
          }
        }
      }
    },
    "/threads": {
      "post": {
        "description": "Create a thread.",
        "operationId": "Create_Thread",
        "summary": "Create a thread.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "createThreadRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createThreadRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/threadObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread",
                "created_at": 0,
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}": {
      "get": {
        "description": "Retrieves a thread.",
        "operationId": "Get_Thread",
        "summary": "Retrieves a thread.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/threadObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread",
                "created_at": 0,
                "metadata": {}
              }
            }
          }
        }
      },
      "post": {
        "description": "Modifies a thread.",
        "operationId": "Modify_Thread",
        "summary": "Modifies a thread.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to modify. Only the `metadata` can be modified.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "modifyThreadRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/modifyThreadRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/threadObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread",
                "created_at": 0,
                "metadata": {}
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a thread.",
        "operationId": "Delete_Thread",
        "summary": "Delete a thread.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to delete.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deleteThreadResponse"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "deleted": true,
                "object": "thread.deleted"
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/messages": {
      "get": {
        "description": "Returns a list of messages for a given thread.",
        "operationId": "List_Messages",
        "summary": "Returns a list of messages for a given thread.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the [thread](/docs/api-reference/threads) the messages belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "type": "integer",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/listMessagesResponse"
            },
            "examples": {
              "application/json": {
                "object": "list",
                "data": [
                  {
                    "id": "string",
                    "object": "thread.message",
                    "created_at": 0,
                    "thread_id": "string",
                    "role": "user",
                    "content": [
                      {
                        "type": "image_file",
                        "image_file": {
                          "file_id": "string"
                        }
                      }
                    ],
                    "assistant_id": "string",
                    "run_id": "string",
                    "file_ids": [
                      "string"
                    ],
                    "metadata": {}
                  }
                ],
                "first_id": "string",
                "last_id": "string",
                "has_more": false
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a message.",
        "operationId": "Create_Message",
        "summary": "Create a message.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the [thread](/docs/api-reference/threads) to create a message for.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "createMessageRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createMessageRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/messageObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.message",
                "created_at": 0,
                "thread_id": "string",
                "role": "user",
                "content": [
                  {
                    "type": "image_file",
                    "image_file": {
                      "file_id": "string"
                    }
                  }
                ],
                "assistant_id": "string",
                "run_id": "string",
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/messages/{message_id}": {
      "get": {
        "description": "Retrieve a message.",
        "operationId": "Get_Message",
        "summary": "Retrieve a message.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the [thread](/docs/api-reference/threads) to which this message belongs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "The ID of the message to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/messageObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.message",
                "created_at": 0,
                "thread_id": "string",
                "role": "user",
                "content": [
                  {
                    "type": "image_file",
                    "image_file": {
                      "file_id": "string"
                    }
                  }
                ],
                "assistant_id": "string",
                "run_id": "string",
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      },
      "post": {
        "description": "Modifies a message.",
        "operationId": "Modify_Message",
        "summary": "Modifies a message.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to which this message belongs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "The ID of the message to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "modifyMessageRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/modifyMessageRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/messageObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.message",
                "created_at": 0,
                "thread_id": "string",
                "role": "user",
                "content": [
                  {
                    "type": "image_file",
                    "image_file": {
                      "file_id": "string"
                    }
                  }
                ],
                "assistant_id": "string",
                "run_id": "string",
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/threads/runs": {
      "post": {
        "description": "Create a thread and run it in one request.",
        "operationId": "Create_Thread_And_Run",
        "summary": "Create a thread and run it in one request.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "createThreadAndRunRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createThreadAndRunRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/runObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.run",
                "created_at": 0,
                "thread_id": "string",
                "assistant_id": "string",
                "status": "queued",
                "required_action": {
                  "type": "submit_tool_outputs",
                  "submit_tool_outputs": {
                    "tool_calls": [
                      {
                        "id": "string",
                        "type": "function",
                        "function": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    ]
                  }
                },
                "last_error": {
                  "code": "server_error",
                  "message": "string"
                },
                "expires_at": 0,
                "started_at": 0,
                "cancelled_at": 0,
                "failed_at": 0,
                "completed_at": 0,
                "model": "string",
                "instructions": "string",
                "tools": [
                  {
                    "type": "code_interpreter"
                  }
                ],
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs": {
      "get": {
        "description": "Returns a list of runs belonging to a thread.",
        "operationId": "List_Runs",
        "summary": "Returns a list of runs belonging to a thread.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread the run belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "type": "integer",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/listRunsResponse"
            },
            "examples": {
              "application/json": {
                "object": "list",
                "data": [
                  {
                    "id": "string",
                    "object": "thread.run",
                    "created_at": 0,
                    "thread_id": "string",
                    "assistant_id": "string",
                    "status": "queued",
                    "required_action": {
                      "type": "submit_tool_outputs",
                      "submit_tool_outputs": {
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ]
                      }
                    },
                    "last_error": {
                      "code": "server_error",
                      "message": "string"
                    },
                    "expires_at": 0,
                    "started_at": 0,
                    "cancelled_at": 0,
                    "failed_at": 0,
                    "completed_at": 0,
                    "model": "string",
                    "instructions": "string",
                    "tools": [
                      {
                        "type": "code_interpreter"
                      }
                    ],
                    "file_ids": [
                      "string"
                    ],
                    "metadata": {}
                  }
                ],
                "first_id": "string",
                "last_id": "string",
                "has_more": false
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a run.",
        "operationId": "Create_Run",
        "summary": "Create a run.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "createRunRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createRunRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/runObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.run",
                "created_at": 0,
                "thread_id": "string",
                "assistant_id": "string",
                "status": "queued",
                "required_action": {
                  "type": "submit_tool_outputs",
                  "submit_tool_outputs": {
                    "tool_calls": [
                      {
                        "id": "string",
                        "type": "function",
                        "function": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    ]
                  }
                },
                "last_error": {
                  "code": "server_error",
                  "message": "string"
                },
                "expires_at": 0,
                "started_at": 0,
                "cancelled_at": 0,
                "failed_at": 0,
                "completed_at": 0,
                "model": "string",
                "instructions": "string",
                "tools": [
                  {
                    "type": "code_interpreter"
                  }
                ],
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}": {
      "get": {
        "description": "Retrieves a run.",
        "operationId": "Get_Run",
        "summary": "Retrieves a run.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the run to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/runObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.run",
                "created_at": 0,
                "thread_id": "string",
                "assistant_id": "string",
                "status": "queued",
                "required_action": {
                  "type": "submit_tool_outputs",
                  "submit_tool_outputs": {
                    "tool_calls": [
                      {
                        "id": "string",
                        "type": "function",
                        "function": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    ]
                  }
                },
                "last_error": {
                  "code": "server_error",
                  "message": "string"
                },
                "expires_at": 0,
                "started_at": 0,
                "cancelled_at": 0,
                "failed_at": 0,
                "completed_at": 0,
                "model": "string",
                "instructions": "string",
                "tools": [
                  {
                    "type": "code_interpreter"
                  }
                ],
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      },
      "post": {
        "description": "Modifies a run.",
        "operationId": "Modify_Run",
        "summary": "Modifies a run.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the run to modify.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "modifyRunRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/modifyRunRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/runObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.run",
                "created_at": 0,
                "thread_id": "string",
                "assistant_id": "string",
                "status": "queued",
                "required_action": {
                  "type": "submit_tool_outputs",
                  "submit_tool_outputs": {
                    "tool_calls": [
                      {
                        "id": "string",
                        "type": "function",
                        "function": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    ]
                  }
                },
                "last_error": {
                  "code": "server_error",
                  "message": "string"
                },
                "expires_at": 0,
                "started_at": 0,
                "cancelled_at": 0,
                "failed_at": 0,
                "completed_at": 0,
                "model": "string",
                "instructions": "string",
                "tools": [
                  {
                    "type": "code_interpreter"
                  }
                ],
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs": {
      "post": {
        "description": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n",
        "operationId": "Submit_Tool_Outputs_To_Run",
        "summary": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the [thread](/docs/api-reference/threads) to which this run belongs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the run that requires the tool output submission.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "submitToolOutputsRunRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/submitToolOutputsRunRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/runObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.run",
                "created_at": 0,
                "thread_id": "string",
                "assistant_id": "string",
                "status": "queued",
                "required_action": {
                  "type": "submit_tool_outputs",
                  "submit_tool_outputs": {
                    "tool_calls": [
                      {
                        "id": "string",
                        "type": "function",
                        "function": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    ]
                  }
                },
                "last_error": {
                  "code": "server_error",
                  "message": "string"
                },
                "expires_at": 0,
                "started_at": 0,
                "cancelled_at": 0,
                "failed_at": 0,
                "completed_at": 0,
                "model": "string",
                "instructions": "string",
                "tools": [
                  {
                    "type": "code_interpreter"
                  }
                ],
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}/cancel": {
      "post": {
        "description": "Cancels a run that is `in_progress`.",
        "operationId": "Cancel_Run",
        "summary": "Cancels a run that is `in_progress`.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to which this run belongs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the run to cancel.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/runObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.run",
                "created_at": 0,
                "thread_id": "string",
                "assistant_id": "string",
                "status": "queued",
                "required_action": {
                  "type": "submit_tool_outputs",
                  "submit_tool_outputs": {
                    "tool_calls": [
                      {
                        "id": "string",
                        "type": "function",
                        "function": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    ]
                  }
                },
                "last_error": {
                  "code": "server_error",
                  "message": "string"
                },
                "expires_at": 0,
                "started_at": 0,
                "cancelled_at": 0,
                "failed_at": 0,
                "completed_at": 0,
                "model": "string",
                "instructions": "string",
                "tools": [
                  {
                    "type": "code_interpreter"
                  }
                ],
                "file_ids": [
                  "string"
                ],
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}/steps": {
      "get": {
        "description": "Returns a list of run steps belonging to a run.",
        "operationId": "List_Run_Steps",
        "summary": "Returns a list of run steps belonging to a run.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread the run and run steps belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the run the run steps belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "type": "integer",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/listRunStepsResponse"
            },
            "examples": {
              "application/json": {
                "object": "list",
                "data": [
                  {
                    "id": "string",
                    "object": "assistant.run.step",
                    "created_at": 0,
                    "assistant_id": "string",
                    "thread_id": "string",
                    "run_id": "string",
                    "type": "message_creation",
                    "status": "in_progress",
                    "step_details": {
                      "type": "message_creation",
                      "message_creation": {
                        "message_id": "string"
                      }
                    },
                    "last_error": {
                      "code": "server_error",
                      "message": "string"
                    },
                    "expired_at": 0,
                    "cancelled_at": 0,
                    "failed_at": 0,
                    "completed_at": 0,
                    "metadata": {}
                  }
                ],
                "first_id": "string",
                "last_id": "string",
                "has_more": false
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}/steps/{step_id}": {
      "get": {
        "description": "Retrieves a run step.",
        "operationId": "Get_Run_Step",
        "summary": "Retrieves a run step.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to which the run and run step belongs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "description": "The ID of the run to which the run step belongs.",
            "required": true,
            "type": "string"
          },
          {
            "name": "step_id",
            "in": "path",
            "description": "The ID of the run step to retrieve.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/runStepObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "assistant.run.step",
                "created_at": 0,
                "assistant_id": "string",
                "thread_id": "string",
                "run_id": "string",
                "type": "message_creation",
                "status": "in_progress",
                "step_details": {
                  "type": "message_creation",
                  "message_creation": {
                    "message_id": "string"
                  }
                },
                "last_error": {
                  "code": "server_error",
                  "message": "string"
                },
                "expired_at": 0,
                "cancelled_at": 0,
                "failed_at": 0,
                "completed_at": 0,
                "metadata": {}
              }
            }
          }
        }
      }
    },
    "/assistants/{assistant_id}/files": {
      "get": {
        "description": "Returns a list of assistant files.",
        "operationId": "List_Assistant_Files",
        "summary": "Returns a list of assistant files.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "description": "The ID of the assistant the file belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "type": "integer",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/listAssistantFilesResponse"
            },
            "examples": {
              "application/json": {
                "object": "list",
                "data": [
                  {
                    "id": "string",
                    "object": "assistant.file",
                    "created_at": 0,
                    "assistant_id": "string"
                  }
                ],
                "first_id": "string",
                "last_id": "string",
                "has_more": false
              }
            }
          }
        }
      },
      "post": {
        "description": "Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).",
        "operationId": "Create_Assistant_File",
        "summary": "Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "description": "The ID of the assistant for which to create a File.\n",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "createAssistantFileRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/createAssistantFileRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/assistantFileObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "assistant.file",
                "created_at": 0,
                "assistant_id": "string"
              }
            }
          }
        }
      }
    },
    "/assistants/{assistant_id}/files/{file_id}": {
      "get": {
        "description": "Retrieves an AssistantFile.",
        "operationId": "Get_Assistant_File",
        "summary": "Retrieves an AssistantFile.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "description": "The ID of the assistant who the file belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_id",
            "in": "path",
            "description": "The ID of the file we're getting.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/assistantFileObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "assistant.file",
                "created_at": 0,
                "assistant_id": "string"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an assistant file.",
        "operationId": "Delete_Assistant_File",
        "summary": "Delete an assistant file.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "description": "The ID of the assistant that the file belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_id",
            "in": "path",
            "description": "The ID of the file to delete.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/deleteAssistantFileResponse"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "deleted": true,
                "object": "assistant.file.deleted"
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/messages/{message_id}/files": {
      "get": {
        "description": "Returns a list of message files.",
        "operationId": "List_Message_Files",
        "summary": "Returns a list of message files.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread that the message and files belong to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "The ID of the message that the files belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "type": "integer",
            "default": 20
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/listMessageFilesResponse"
            },
            "examples": {
              "application/json": {
                "object": "list",
                "data": [
                  {
                    "id": "string",
                    "object": "thread.message.file",
                    "created_at": 0,
                    "message_id": "string"
                  }
                ],
                "first_id": "string",
                "last_id": "string",
                "has_more": false
              }
            }
          }
        }
      }
    },
    "/threads/{thread_id}/messages/{message_id}/files/{file_id}": {
      "get": {
        "description": "Retrieves a message file.",
        "operationId": "Get_Message_File",
        "summary": "Retrieves a message file.",
        "tags": [
          "Assistants"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "description": "The ID of the thread to which the message and File belong.",
            "required": true,
            "type": "string"
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "The ID of the message the file belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "name": "file_id",
            "in": "path",
            "description": "The ID of the file being retrieved.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/messageFileObject"
            },
            "examples": {
              "application/json": {
                "id": "string",
                "object": "thread.message.file",
                "created_at": 0,
                "message_id": "string"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "errorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/error"
        }
      }
    },
    "errorBase": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/errorBase"
        }
      ],
      "properties": {
        "param": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "inner_error": {
          "$ref": "#/definitions/innerError"
        }
      }
    },
    "innerError": {
      "description": "Inner error with additional details.",
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/innerErrorCode"
        },
        "content_filter_results": {
          "$ref": "#/definitions/contentFilterPromptResults"
        }
      }
    },
    "innerErrorCode": {
      "description": "Error codes for the inner error object.",
      "enum": [
        "ResponsibleAIPolicyViolation"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "InnerErrorCode",
        "modelAsString": true,
        "values": [
          {
            "value": "ResponsibleAIPolicyViolation",
            "description": "The prompt violated one of more content filter rules."
          }
        ]
      }
    },
    "dalleErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/dalleError"
        }
      }
    },
    "dalleError": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/errorBase"
        }
      ],
      "properties": {
        "param": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "inner_error": {
          "$ref": "#/definitions/dalleInnerError"
        }
      }
    },
    "dalleInnerError": {
      "description": "Inner error with additional details.",
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#/definitions/innerErrorCode"
        },
        "content_filter_results": {
          "$ref": "#/definitions/dalleFilterResults"
        },
        "revised_prompt": {
          "description": "The prompt that was used to generate the image, if there was any revision to the prompt.",
          "type": "string"
        }
      }
    },
    "contentFilterResultBase": {
      "required": [
        "filtered"
      ],
      "type": "object",
      "properties": {
        "filtered": {
          "type": "boolean"
        }
      }
    },
    "contentFilterSeverityResult": {
      "required": [
        "severity",
        "filtered"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/contentFilterResultBase"
        },
        {
          "properties": {
            "severity": {
              "enum": [
                "safe",
                "low",
                "medium",
                "high"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "ContentFilterSeverity",
                "modelAsString": true,
                "values": [
                  {
                    "value": "safe",
                    "description": "General content or related content in generic or non-harmful contexts."
                  },
                  {
                    "value": "low",
                    "description": "Harmful content at a low intensity and risk level."
                  },
                  {
                    "value": "medium",
                    "description": "Harmful content at a medium intensity and risk level."
                  },
                  {
                    "value": "high",
                    "description": "Harmful content at a high intensity and risk level."
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "contentFilterDetectedResult": {
      "required": [
        "detected",
        "filtered"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/contentFilterResultBase"
        },
        {
          "properties": {
            "detected": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "contentFilterDetectedWithCitationResult": {
      "required": [
        "detected",
        "filtered"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/contentFilterDetectedResult"
        },
        {
          "properties": {
            "citation": {
              "type": "object",
              "properties": {
                "URL": {
                  "type": "string"
                },
                "license": {
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    },
    "contentFilterIdResult": {
      "required": [
        "id",
        "filtered"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/contentFilterResultBase"
        },
        {
          "properties": {
            "id": {
              "type": "string"
            }
          }
        }
      ]
    },
    "contentFilterResultsBase": {
      "description": "Information about the content filtering results.",
      "type": "object",
      "properties": {
        "sexual": {
          "$ref": "#/definitions/contentFilterSeverityResult"
        },
        "violence": {
          "$ref": "#/definitions/contentFilterSeverityResult"
        },
        "hate": {
          "$ref": "#/definitions/contentFilterSeverityResult"
        },
        "self_harm": {
          "$ref": "#/definitions/contentFilterSeverityResult"
        },
        "profanity": {
          "$ref": "#/definitions/contentFilterDetectedResult"
        },
        "custom_blocklists": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/contentFilterIdResult"
          }
        },
        "error": {
          "$ref": "#/definitions/errorBase"
        }
      }
    },
    "contentFilterPromptResults": {
      "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/contentFilterResultsBase"
        },
        {
          "properties": {
            "jailbreak": {
              "$ref": "#/definitions/contentFilterDetectedResult"
            }
          }
        }
      ]
    },
    "contentFilterChoiceResults": {
      "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about third party text and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/contentFilterResultsBase"
        },
        {
          "properties": {
            "protected_material_text": {
              "$ref": "#/definitions/contentFilterDetectedResult"
            }
          }
        },
        {
          "properties": {
            "protected_material_code": {
              "$ref": "#/definitions/contentFilterDetectedWithCitationResult"
            }
          }
        }
      ]
    },
    "promptFilterResult": {
      "description": "Content filtering results for a single prompt in the request.",
      "type": "object",
      "properties": {
        "prompt_index": {
          "type": "integer"
        },
        "content_filter_results": {
          "$ref": "#/definitions/contentFilterPromptResults"
        }
      }
    },
    "promptFilterResults": {
      "description": "Content filtering results for zero or more prompts in the request. In a streaming request, results for different prompts may arrive at different times or in different orders.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/promptFilterResult"
      }
    },
    "dalleContentFilterResults": {
      "description": "Information about the content filtering results.",
      "type": "object",
      "properties": {
        "sexual": {
          "$ref": "#/definitions/contentFilterSeverityResult"
        },
        "violence": {
          "$ref": "#/definitions/contentFilterSeverityResult"
        },
        "hate": {
          "$ref": "#/definitions/contentFilterSeverityResult"
        },
        "self_harm": {
          "$ref": "#/definitions/contentFilterSeverityResult"
        }
      }
    },
    "dalleFilterResults": {
      "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/dalleContentFilterResults"
        },
        {
          "properties": {
            "profanity": {
              "$ref": "#/definitions/contentFilterDetectedResult"
            },
            "jailbreak": {
              "$ref": "#/definitions/contentFilterDetectedResult"
            }
          }
        }
      ]
    },
    "chatCompletionsRequestCommon": {
      "type": "object",
      "properties": {
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.",
          "default": 1.0,
          "maximum": 2.0,
          "minimum": 0.0,
          "type": "number",
          "example": 1.0
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or `temperature` but not both.",
          "default": 1.0,
          "maximum": 1.0,
          "minimum": 0.0,
          "type": "number",
          "example": 1.0
        },
        "stream": {
          "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.",
          "default": false,
          "type": "boolean"
        },
        "stop": {
          "description": "Up to 4 sequences where the API will stop generating further tokens.",
          "default": null,
          "allOf": [
            {
              "type": "string"
            }
          ]
        },
        "max_tokens": {
          "description": "The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).",
          "default": 4096,
          "type": "integer"
        },
        "presence_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
          "default": 0.0,
          "maximum": 2.0,
          "minimum": -2.0,
          "type": "number"
        },
        "frequency_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
          "default": 0.0,
          "maximum": 2.0,
          "minimum": -2.0,
          "type": "number"
        },
        "logit_bias": {
          "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
          "type": "object"
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.",
          "type": "string",
          "example": "user-1234"
        }
      }
    },
    "createChatCompletionRequest": {
      "required": [
        "messages"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/chatCompletionsRequestCommon"
        },
        {
          "properties": {
            "messages": {
              "description": "A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).",
              "minItems": 1,
              "type": "array",
              "items": {
                "$ref": "#/definitions/chatCompletionRequestMessage"
              }
            },
            "data_sources": {
              "description": "  The configuration entries for Azure OpenAI chat extensions that use them.\n  This additional specification is only compatible with Azure OpenAI.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/azureChatExtensionConfiguration"
              }
            },
            "enhancements": {
              "description": "The type of enhancements needed.",
              "type": "object",
              "properties": {
                "grounding": {
                  "description": "Request object to specify if grounding enhancement is needed.",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "default": false,
                      "type": "boolean"
                    }
                  }
                },
                "ocr": {
                  "description": "Request object to specify if ocr enhancement is needed.",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "default": false,
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "n": {
              "description": "How many chat completion choices to generate for each input message.",
              "default": 1,
              "maximum": 128.0,
              "minimum": 1.0,
              "type": "integer",
              "example": 1
            },
            "seed": {
              "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.",
              "default": 0,
              "maximum": 9.2233720368547758E+18,
              "minimum": -9.2233720368547758E+18,
              "type": "integer",
              "example": 1
            },
            "logprobs": {
              "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.",
              "default": false,
              "type": "boolean"
            },
            "top_logprobs": {
              "description": "An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
              "maximum": 5.0,
              "minimum": 0.0,
              "type": "integer"
            },
            "response_format": {
              "description": "An object specifying the format that the model must output. Used to enable JSON mode.",
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/definitions/chatCompletionResponseFormat"
                }
              }
            },
            "tools": {
              "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.",
              "minItems": 1,
              "type": "array",
              "items": {
                "$ref": "#/definitions/chatCompletionTool"
              }
            },
            "tool_choice": {
              "$ref": "#/definitions/chatCompletionToolChoiceOption"
            },
            "functions": {
              "description": "Deprecated in favor of `tools`. A list of functions the model may generate JSON inputs for.",
              "maxItems": 128,
              "minItems": 1,
              "type": "array",
              "items": {
                "$ref": "#/definitions/chatCompletionFunction"
              }
            },
            "function_call": {
              "description": "Deprecated in favor of `tool_choice`. Controls how the model responds to function calls. \"none\" means the model does not call a function, and responds to the end-user. \"auto\" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{\"name\":\\ \"my_function\"}` forces the model to call that function. \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.",
              "allOf": [
                {
                  "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.",
                  "enum": [
                    "none",
                    "auto"
                  ],
                  "type": "string"
                }
              ]
            }
          }
        }
      ],
      "example": {
        "temperature": 1.0,
        "top_p": 1.0,
        "stream": false,
        "stop": null,
        "max_tokens": 4096,
        "presence_penalty": 0.0,
        "frequency_penalty": 0.0,
        "logit_bias": {},
        "user": "user-1234",
        "messages": [
          {
            "role": "system"
          }
        ],
        "data_sources": [
          {
            "type": "azure_search"
          }
        ],
        "enhancements": {
          "grounding": {
            "enabled": false
          },
          "ocr": {
            "enabled": false
          }
        },
        "n": 1,
        "seed": 0,
        "logprobs": false,
        "top_logprobs": 0,
        "response_format": {
          "type": "text"
        },
        "tools": [
          {
            "type": "function",
            "function": {
              "description": "string",
              "name": "string",
              "parameters": {}
            }
          }
        ],
        "tool_choice": {},
        "functions": [
          {
            "name": "string",
            "description": "string",
            "parameters": {}
          }
        ],
        "function_call": {}
      }
    },
    "chatCompletionResponseFormat": {
      "description": "Setting to `json_object` enables JSON mode. This guarantees that the message the model generates is valid JSON.",
      "default": "text",
      "enum": [
        "text",
        "json_object"
      ],
      "type": "string",
      "example": "json_object",
      "x-ms-enum": {
        "name": "ChatCompletionResponseFormat",
        "modelAsString": true,
        "values": [
          {
            "value": "text",
            "description": "Response format is a plain text string."
          },
          {
            "value": "json_object",
            "description": "Response format is a JSON object."
          }
        ]
      }
    },
    "chatCompletionFunction": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
          "type": "string"
        },
        "description": {
          "description": "The description of what the function does.",
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/chatCompletionFunctionParameters"
        }
      }
    },
    "chatCompletionFunctionParameters": {
      "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.",
      "type": "object"
    },
    "chatCompletionRequestMessage": {
      "required": [
        "role"
      ],
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/chatCompletionRequestMessageRole"
        }
      },
      "discriminator": "role"
    },
    "chatCompletionRequestMessageRole": {
      "description": "The role of the messages author.",
      "enum": [
        "system",
        "user",
        "assistant",
        "tool",
        "function"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ChatCompletionRequestMessageRole",
        "modelAsString": true,
        "values": [
          {
            "value": "system",
            "description": "The message author role is system."
          },
          {
            "value": "user",
            "description": "The message author role is user."
          },
          {
            "value": "assistant",
            "description": "The message author role is assistant."
          },
          {
            "value": "tool",
            "description": "The message author role is tool."
          },
          {
            "value": "function",
            "description": "Deprecated. The message author role is function."
          }
        ]
      }
    },
    "chatCompletionRequestMessageSystem": {
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/chatCompletionRequestMessage"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "description": "The contents of the message.",
              "type": "string"
            }
          }
        }
      ]
    },
    "chatCompletionRequestMessageUser": {
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/chatCompletionRequestMessage"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "allOf": [
                {
                  "description": "The contents of the message.",
                  "type": "string"
                }
              ]
            }
          }
        }
      ]
    },
    "chatCompletionRequestMessageContentPart": {
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/chatCompletionRequestMessageContentPartType"
        }
      },
      "discriminator": "type"
    },
    "chatCompletionRequestMessageContentPartType": {
      "description": "The type of the content part.",
      "enum": [
        "text",
        "image_url"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ChatCompletionRequestMessageContentPartType",
        "modelAsString": true,
        "values": [
          {
            "value": "text",
            "description": "The content part type is text."
          },
          {
            "value": "image_url",
            "description": "The content part type is image_url."
          }
        ]
      }
    },
    "chatCompletionRequestMessageContentPartText": {
      "required": [
        "text"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/chatCompletionRequestMessageContentPart"
        },
        {
          "type": "object",
          "properties": {
            "text": {
              "description": "The text content.",
              "type": "string"
            }
          }
        }
      ]
    },
    "chatCompletionRequestMessageContentPartImage": {
      "required": [
        "url"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/chatCompletionRequestMessageContentPart"
        },
        {
          "type": "object",
          "properties": {
            "url": {
              "format": "uri",
              "description": "Either a URL of the image or the base64 encoded image data.",
              "type": "string"
            },
            "detail": {
              "$ref": "#/definitions/imageDetailLevel"
            }
          }
        }
      ]
    },
    "imageDetailLevel": {
      "description": "Specifies the detail level of the image.",
      "default": "auto",
      "enum": [
        "auto",
        "low",
        "high"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ImageDetailLevel",
        "modelAsString": true,
        "values": [
          {
            "value": "auto",
            "description": "The image detail level is auto."
          },
          {
            "value": "low",
            "description": "The image detail level is low."
          },
          {
            "value": "high",
            "description": "The image detail level is high."
          }
        ]
      }
    },
    "chatCompletionRequestMessageAssistant": {
      "required": [
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/chatCompletionRequestMessage"
        },
        {
          "type": "object",
          "properties": {
            "content": {
              "description": "The contents of the message.",
              "type": "string"
            },
            "tool_calls": {
              "description": "The tool calls generated by the model, such as function calls.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/chatCompletionMessageToolCall"
              }
            },
            "context": {
              "$ref": "#/definitions/azureChatExtensionsMessageContext"
            }
          }
        }
      ]
    },
    "azureChatExtensionConfiguration": {
      "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/azureChatExtensionType"
        }
      },
      "discriminator": "type"
    },
    "azureChatExtensionType": {
      "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
      "enum": [
        "azure_search",
        "azure_ml_index",
        "azure_cosmos_db",
        "elasticsearch",
        "pinecone"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "AzureChatExtensionType",
        "modelAsString": true,
        "values": [
          {
            "name": "azureSearch",
            "value": "azure_search",
            "description": "Represents the use of Azure Search as an Azure OpenAI chat extension."
          },
          {
            "name": "azureMachineLearningIndex",
            "value": "azure_ml_index",
            "description": "Represents the use of Azure Machine Learning index as an Azure OpenAI chat extension."
          },
          {
            "name": "azureCosmosDB",
            "value": "azure_cosmos_db",
            "description": "Represents the use of Azure Cosmos DB as an Azure OpenAI chat extension."
          },
          {
            "name": "elasticsearch",
            "value": "elasticsearch",
            "description": "Represents the use of Elasticsearch® index as an Azure OpenAI chat extension."
          },
          {
            "name": "pinecone",
            "value": "pinecone",
            "description": "Represents the use of Pinecone index as an Azure OpenAI chat extension."
          }
        ]
      }
    },
    "azureSearchChatExtensionConfiguration": {
      "description": "A specific representation of configurable options for Azure Search when using it as an Azure OpenAI chat\nextension.",
      "required": [
        "parameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/azureChatExtensionConfiguration"
        },
        {
          "properties": {
            "parameters": {
              "$ref": "#/definitions/azureSearchChatExtensionParameters"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "azure_search"
    },
    "azureSearchChatExtensionParameters": {
      "description": "Parameters for Azure Search when used as an Azure OpenAI chat extension.",
      "required": [
        "authentication",
        "endpoint",
        "index_name"
      ],
      "type": "object",
      "properties": {
        "authentication": {
          "allOf": [
            {
              "$ref": "#/definitions/onYourDataApiKeyAuthenticationOptions"
            }
          ]
        },
        "top_n_documents": {
          "format": "int32",
          "description": "The configured top number of documents to feature for the configured query.",
          "type": "integer"
        },
        "in_scope": {
          "description": "Whether queries should be restricted to use of indexed data.",
          "type": "boolean"
        },
        "strictness": {
          "format": "int32",
          "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
          "maximum": 5.0,
          "minimum": 1.0,
          "type": "integer"
        },
        "role_information": {
          "description": "Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit.",
          "type": "string"
        },
        "endpoint": {
          "format": "uri",
          "description": "The absolute endpoint path for the Azure Search resource to use.",
          "type": "string"
        },
        "index_name": {
          "description": "The name of the index to use as available in the referenced Azure Search resource.",
          "type": "string"
        },
        "fields_mapping": {
          "$ref": "#/definitions/azureSearchIndexFieldMappingOptions"
        },
        "query_type": {
          "$ref": "#/definitions/azureSearchQueryType"
        },
        "semantic_configuration": {
          "description": "The additional semantic configuration for the query.",
          "type": "string"
        },
        "filter": {
          "description": "Search filter.",
          "type": "string"
        },
        "embedding_dependency": {
          "allOf": [
            {
              "$ref": "#/definitions/onYourDataEndpointVectorizationSource"
            }
          ]
        }
      }
    },
    "azureSearchIndexFieldMappingOptions": {
      "description": "Optional settings to control how fields are processed when using a configured Azure Search resource.",
      "type": "object",
      "properties": {
        "title_field": {
          "description": "The name of the index field to use as a title.",
          "type": "string"
        },
        "url_field": {
          "description": "The name of the index field to use as a URL.",
          "type": "string"
        },
        "filepath_field": {
          "description": "The name of the index field to use as a filepath.",
          "type": "string"
        },
        "content_fields": {
          "description": "The names of index fields that should be treated as content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content_fields_separator": {
          "description": "The separator pattern that content fields should use.",
          "type": "string"
        },
        "vector_fields": {
          "description": "The names of fields that represent vector data.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "image_vector_fields": {
          "description": "The names of fields that represent image vector data.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "azureSearchQueryType": {
      "description": "The type of Azure Search retrieval query that should be executed when using it as an Azure OpenAI chat extension.",
      "enum": [
        "simple",
        "semantic",
        "vector",
        "vector_simple_hybrid",
        "vector_semantic_hybrid"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "AzureSearchQueryType",
        "modelAsString": true,
        "values": [
          {
            "name": "simple",
            "value": "simple",
            "description": "Represents the default, simple query parser."
          },
          {
            "name": "semantic",
            "value": "semantic",
            "description": "Represents the semantic query parser for advanced semantic modeling."
          },
          {
            "name": "vector",
            "value": "vector",
            "description": "Represents vector search over computed data."
          },
          {
            "name": "vectorSimpleHybrid",
            "value": "vector_simple_hybrid",
            "description": "Represents a combination of the simple query strategy with vector data."
          },
          {
            "name": "vectorSemanticHybrid",
            "value": "vector_semantic_hybrid",
            "description": "Represents a combination of semantic search and vector data querying."
          }
        ]
      }
    },
    "azureMachineLearningIndexChatExtensionConfiguration": {
      "description": "A specific representation of configurable options for Azure Machine Learning vector index when using it as an Azure\nOpenAI chat extension.",
      "required": [
        "parameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/azureChatExtensionConfiguration"
        },
        {
          "properties": {
            "parameters": {
              "$ref": "#/definitions/azureMachineLearningIndexChatExtensionParameters"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "azure_ml_index"
    },
    "azureMachineLearningIndexChatExtensionParameters": {
      "description": "Parameters for the Azure Machine Learning vector index chat extension.",
      "required": [
        "authentication",
        "name",
        "project_resource_id",
        "version"
      ],
      "type": "object",
      "properties": {
        "authentication": {
          "allOf": [
            {
              "$ref": "#/definitions/onYourDataAccessTokenAuthenticationOptions"
            }
          ]
        },
        "top_n_documents": {
          "format": "int32",
          "description": "The configured top number of documents to feature for the configured query.",
          "type": "integer"
        },
        "in_scope": {
          "description": "Whether queries should be restricted to use of indexed data.",
          "type": "boolean"
        },
        "strictness": {
          "format": "int32",
          "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
          "maximum": 5.0,
          "minimum": 1.0,
          "type": "integer"
        },
        "role_information": {
          "description": "Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit.",
          "type": "string"
        },
        "project_resource_id": {
          "description": "The resource ID of the Azure Machine Learning project.",
          "type": "string"
        },
        "name": {
          "description": "The Azure Machine Learning vector index name.",
          "type": "string"
        },
        "version": {
          "description": "The version of the Azure Machine Learning vector index.",
          "type": "string"
        },
        "filter": {
          "description": "Search filter. Only supported if the Azure Machine Learning vector index is of type AzureSearch.",
          "type": "string"
        }
      }
    },
    "azureCosmosDBChatExtensionConfiguration": {
      "description": "A specific representation of configurable options for Azure Cosmos DB when using it as an Azure OpenAI chat\nextension.",
      "required": [
        "parameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/azureChatExtensionConfiguration"
        },
        {
          "properties": {
            "parameters": {
              "$ref": "#/definitions/azureCosmosDBChatExtensionParameters"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "azure_cosmos_db"
    },
    "azureCosmosDBChatExtensionParameters": {
      "description": "Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Azure Cosmos DB for\nMongoDB vCore.",
      "required": [
        "authentication",
        "container_name",
        "database_name",
        "embedding_dependency",
        "fields_mapping",
        "index_name"
      ],
      "type": "object",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/onYourDataConnectionStringAuthenticationOptions"
        },
        "top_n_documents": {
          "format": "int32",
          "description": "The configured top number of documents to feature for the configured query.",
          "type": "integer"
        },
        "in_scope": {
          "description": "Whether queries should be restricted to use of indexed data.",
          "type": "boolean"
        },
        "strictness": {
          "format": "int32",
          "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
          "maximum": 5.0,
          "minimum": 1.0,
          "type": "integer"
        },
        "role_information": {
          "description": "Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit.",
          "type": "string"
        },
        "database_name": {
          "description": "The MongoDB vCore database name to use with Azure Cosmos DB.",
          "type": "string"
        },
        "container_name": {
          "description": "The name of the Azure Cosmos DB resource container.",
          "type": "string"
        },
        "index_name": {
          "description": "The MongoDB vCore index name to use with Azure Cosmos DB.",
          "type": "string"
        },
        "fields_mapping": {
          "$ref": "#/definitions/azureCosmosDBFieldMappingOptions"
        },
        "embedding_dependency": {
          "allOf": [
            {
              "$ref": "#/definitions/onYourDataEndpointVectorizationSource"
            }
          ]
        }
      }
    },
    "azureCosmosDBFieldMappingOptions": {
      "description": "Optional settings to control how fields are processed when using a configured Azure Cosmos DB resource.",
      "required": [
        "content_fields",
        "vector_fields"
      ],
      "type": "object",
      "properties": {
        "title_field": {
          "description": "The name of the index field to use as a title.",
          "type": "string"
        },
        "url_field": {
          "description": "The name of the index field to use as a URL.",
          "type": "string"
        },
        "filepath_field": {
          "description": "The name of the index field to use as a filepath.",
          "type": "string"
        },
        "content_fields": {
          "description": "The names of index fields that should be treated as content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content_fields_separator": {
          "description": "The separator pattern that content fields should use.",
          "type": "string"
        },
        "vector_fields": {
          "description": "The names of fields that represent vector data.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "elasticsearchChatExtensionConfiguration": {
      "description": "A specific representation of configurable options for Elasticsearch when using it as an Azure OpenAI chat\nextension.",
      "required": [
        "parameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/azureChatExtensionConfiguration"
        },
        {
          "properties": {
            "parameters": {
              "$ref": "#/definitions/elasticsearchChatExtensionParameters"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "elasticsearch"
    },
    "elasticsearchChatExtensionParameters": {
      "description": "Parameters to use when configuring Elasticsearch® as an Azure OpenAI chat extension. ",
      "required": [
        "authentication",
        "endpoint",
        "index_name"
      ],
      "type": "object",
      "properties": {
        "authentication": {
          "allOf": [
            {
              "$ref": "#/definitions/onYourDataKeyAndKeyIdAuthenticationOptions"
            }
          ]
        },
        "top_n_documents": {
          "format": "int32",
          "description": "The configured top number of documents to feature for the configured query.",
          "type": "integer"
        },
        "in_scope": {
          "description": "Whether queries should be restricted to use of indexed data.",
          "type": "boolean"
        },
        "strictness": {
          "format": "int32",
          "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
          "maximum": 5.0,
          "minimum": 1.0,
          "type": "integer"
        },
        "role_information": {
          "description": "Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit.",
          "type": "string"
        },
        "endpoint": {
          "format": "uri",
          "description": "The endpoint of Elasticsearch®.",
          "type": "string"
        },
        "index_name": {
          "description": "The index name of Elasticsearch®.",
          "type": "string"
        },
        "fields_mapping": {
          "$ref": "#/definitions/elasticsearchIndexFieldMappingOptions"
        },
        "query_type": {
          "$ref": "#/definitions/elasticsearchQueryType"
        },
        "embedding_dependency": {
          "allOf": [
            {
              "$ref": "#/definitions/onYourDataEndpointVectorizationSource"
            }
          ]
        }
      }
    },
    "elasticsearchIndexFieldMappingOptions": {
      "description": "Optional settings to control how fields are processed when using a configured Elasticsearch® resource.",
      "type": "object",
      "properties": {
        "title_field": {
          "description": "The name of the index field to use as a title.",
          "type": "string"
        },
        "url_field": {
          "description": "The name of the index field to use as a URL.",
          "type": "string"
        },
        "filepath_field": {
          "description": "The name of the index field to use as a filepath.",
          "type": "string"
        },
        "content_fields": {
          "description": "The names of index fields that should be treated as content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content_fields_separator": {
          "description": "The separator pattern that content fields should use.",
          "type": "string"
        },
        "vector_fields": {
          "description": "The names of fields that represent vector data.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "elasticsearchQueryType": {
      "description": "The type of Elasticsearch® retrieval query that should be executed when using it as an Azure OpenAI chat extension.",
      "enum": [
        "simple",
        "vector"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ElasticsearchQueryType",
        "modelAsString": true,
        "values": [
          {
            "name": "simple",
            "value": "simple",
            "description": "Represents the default, simple query parser."
          },
          {
            "name": "vector",
            "value": "vector",
            "description": "Represents vector search over computed data."
          }
        ]
      }
    },
    "pineconeChatExtensionConfiguration": {
      "description": "A specific representation of configurable options for Pinecone when using it as an Azure OpenAI chat\nextension.",
      "required": [
        "parameters"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/azureChatExtensionConfiguration"
        },
        {
          "properties": {
            "parameters": {
              "$ref": "#/definitions/pineconeChatExtensionParameters"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "pinecone"
    },
    "pineconeChatExtensionParameters": {
      "description": "Parameters for configuring Azure OpenAI Pinecone chat extensions.",
      "required": [
        "authentication",
        "embedding_dependency",
        "environment",
        "fields_mapping",
        "index_name"
      ],
      "type": "object",
      "properties": {
        "authentication": {
          "$ref": "#/definitions/onYourDataApiKeyAuthenticationOptions"
        },
        "top_n_documents": {
          "format": "int32",
          "description": "The configured top number of documents to feature for the configured query.",
          "type": "integer"
        },
        "in_scope": {
          "description": "Whether queries should be restricted to use of indexed data.",
          "type": "boolean"
        },
        "strictness": {
          "format": "int32",
          "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
          "maximum": 5.0,
          "minimum": 1.0,
          "type": "integer"
        },
        "role_information": {
          "description": "Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant's personality and tell it how to format responses. There's a 100 token limit for it, and it counts against the overall token limit.",
          "type": "string"
        },
        "environment": {
          "description": "The environment name of Pinecone.",
          "type": "string"
        },
        "index_name": {
          "description": "The name of the Pinecone database index.",
          "type": "string"
        },
        "fields_mapping": {
          "$ref": "#/definitions/pineconeFieldMappingOptions"
        },
        "embedding_dependency": {
          "$ref": "#/definitions/onYourDataDeploymentNameVectorizationSource"
        }
      }
    },
    "pineconeFieldMappingOptions": {
      "description": "Optional settings to control how fields are processed when using a configured Pinecone resource.",
      "required": [
        "content_fields"
      ],
      "type": "object",
      "properties": {
        "title_field": {
          "description": "The name of the index field to use as a title.",
          "type": "string"
        },
        "url_field": {
          "description": "The name of the index field to use as a URL.",
          "type": "string"
        },
        "filepath_field": {
          "description": "The name of the index field to use as a filepath.",
          "type": "string"
        },
        "content_fields": {
          "description": "The names of index fields that should be treated as content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content_fields_separator": {
          "description": "The separator pattern that content fields should use.",
          "type": "string"
        }
      }
    },
    "onYourDataAuthenticationOptions": {
      "description": "The authentication options for Azure OpenAI On Your Data.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/onYourDataAuthenticationType"
        }
      },
      "discriminator": "type"
    },
    "onYourDataAuthenticationType": {
      "description": "The authentication types supported with Azure OpenAI On Your Data.",
      "enum": [
        "api_key",
        "connection_string",
        "key_and_key_id",
        "encoded_api_key",
        "access_token",
        "system_assigned_managed_identity",
        "user_assigned_managed_identity"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "OnYourDataAuthenticationType",
        "modelAsString": true,
        "values": [
          {
            "name": "apiKey",
            "value": "api_key",
            "description": "Authentication via API key."
          },
          {
            "name": "connectionString",
            "value": "connection_string",
            "description": "Authentication via connection string."
          },
          {
            "name": "keyAndKeyId",
            "value": "key_and_key_id",
            "description": "Authentication via key and key ID pair."
          },
          {
            "name": "encodedApiKey",
            "value": "encoded_api_key",
            "description": "Authentication via encoded API key."
          },
          {
            "name": "accessToken",
            "value": "access_token",
            "description": "Authentication via access token."
          },
          {
            "name": "systemAssignedManagedIdentity",
            "value": "system_assigned_managed_identity",
            "description": "Authentication via system-assigned managed identity."
          },
          {
            "name": "userAssignedManagedIdentity",
            "value": "user_assigned_managed_identity",
            "description": "Authentication via user-assigned managed identity."
          }
        ]
      }
    },
    "onYourDataApiKeyAuthenticationOptions": {
      "description": "The authentication options for Azure OpenAI On Your Data when using an API key.",
      "required": [
        "key"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataAuthenticationOptions"
        },
        {
          "properties": {
            "key": {
              "description": "The API key to use for authentication.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "api_key"
    },
    "onYourDataConnectionStringAuthenticationOptions": {
      "description": "The authentication options for Azure OpenAI On Your Data when using a connection string.",
      "required": [
        "connection_string"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataAuthenticationOptions"
        },
        {
          "properties": {
            "connection_string": {
              "description": "The connection string to use for authentication.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "connection_string"
    },
    "onYourDataKeyAndKeyIdAuthenticationOptions": {
      "description": "The authentication options for Azure OpenAI On Your Data when using an Elasticsearch key and key ID pair.",
      "required": [
        "key",
        "key_id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataAuthenticationOptions"
        },
        {
          "properties": {
            "key": {
              "description": "The Elasticsearch key to use for authentication.",
              "type": "string"
            },
            "key_id": {
              "description": "The Elasticsearch key ID to use for authentication.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "key_and_key_id"
    },
    "onYourDataEncodedApiKeyAuthenticationOptions": {
      "description": "The authentication options for Azure OpenAI On Your Data when using an Elasticsearch encoded API key.",
      "required": [
        "encoded_api_key"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataAuthenticationOptions"
        },
        {
          "properties": {
            "encoded_api_key": {
              "description": "The Elasticsearch encoded API key to use for authentication.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "encoded_api_key"
    },
    "onYourDataAccessTokenAuthenticationOptions": {
      "description": "The authentication options for Azure OpenAI On Your Data when using access token.",
      "required": [
        "access_token"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataAuthenticationOptions"
        },
        {
          "properties": {
            "access_token": {
              "description": "The access token to use for authentication.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "access_token"
    },
    "onYourDataSystemAssignedManagedIdentityAuthenticationOptions": {
      "description": "The authentication options for Azure OpenAI On Your Data when using a system-assigned managed identity.",
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataAuthenticationOptions"
        }
      ],
      "x-ms-discriminator-value": "system_assigned_managed_identity"
    },
    "onYourDataUserAssignedManagedIdentityAuthenticationOptions": {
      "description": "The authentication options for Azure OpenAI On Your Data when using a user-assigned managed identity.",
      "required": [
        "managed_identity_resource_id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataAuthenticationOptions"
        },
        {
          "properties": {
            "managed_identity_resource_id": {
              "description": "The resource ID of the user-assigned managed identity to use for authentication.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "user_assigned_managed_identity"
    },
    "onYourDataVectorizationSource": {
      "description": "An abstract representation of a vectorization source for Azure OpenAI On Your Data with vector search.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/onYourDataVectorizationSourceType"
        }
      },
      "discriminator": "type"
    },
    "onYourDataVectorizationSourceType": {
      "description": "Represents the available sources Azure OpenAI On Your Data can use to configure vectorization of data for use with\nvector search.",
      "enum": [
        "endpoint",
        "deployment_name",
        "model_id"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "OnYourDataVectorizationSourceType",
        "modelAsString": true,
        "values": [
          {
            "name": "endpoint",
            "value": "endpoint",
            "description": "Represents vectorization performed by public service calls to an Azure OpenAI embedding model."
          },
          {
            "name": "deploymentName",
            "value": "deployment_name",
            "description": "Represents an Ada model deployment name to use. This model deployment must be in the same Azure OpenAI resource, but\nOn Your Data will use this model deployment via an internal call rather than a public one, which enables vector\nsearch even in private networks."
          },
          {
            "name": "modelId",
            "value": "model_id",
            "description": "Represents a specific embedding model ID as defined in the search service.\nCurrently only supported by Elasticsearch®."
          }
        ]
      }
    },
    "onYourDataEndpointVectorizationSource": {
      "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a public Azure OpenAI endpoint call for embeddings.",
      "required": [
        "authentication",
        "endpoint"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataVectorizationSource"
        },
        {
          "properties": {
            "endpoint": {
              "format": "uri",
              "description": "Specifies the resource endpoint URL from which embeddings should be retrieved. It should be in the format of https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/embeddings. The api-version query parameter is not allowed.",
              "type": "string"
            },
            "authentication": {
              "$ref": "#/definitions/onYourDataApiKeyAuthenticationOptions"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "endpoint"
    },
    "onYourDataDeploymentNameVectorizationSource": {
      "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non an internal embeddings model deployment name in the same Azure OpenAI resource.",
      "required": [
        "deployment_name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataVectorizationSource"
        },
        {
          "properties": {
            "deployment_name": {
              "description": "Specifies the name of the model deployment to use for vectorization. This model deployment must be in the same Azure OpenAI resource, but On Your Data will use this model deployment via an internal call rather than a public one, which enables vector search even in private networks.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "deployment_name"
    },
    "onYourDataModelIdVectorizationSource": {
      "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a search service model ID. Currently only supported by Elasticsearch®.",
      "required": [
        "model_id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/onYourDataVectorizationSource"
        },
        {
          "properties": {
            "model_id": {
              "description": "Specifies the model ID to use for vectorization. This model ID must be defined in the search service.",
              "type": "string"
            }
          }
        }
      ],
      "x-ms-discriminator-value": "model_id"
    },
    "azureChatExtensionsMessageContext": {
      "description": "  A representation of the additional context information available when Azure OpenAI chat extensions are involved\n  in the generation of a corresponding chat completions response. This context information is only populated when\n  using an Azure OpenAI request configured to use a matching extension.",
      "type": "object",
      "properties": {
        "citations": {
          "description": "The data source retrieval result, used to generate the assistant message in the response.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/citation"
          },
          "x-ms-identifiers": []
        },
        "intent": {
          "description": "The detected intent from the chat history, used to pass to the next turn to carry over the context.",
          "type": "string"
        }
      }
    },
    "citation": {
      "description": "citation information for a chat completions response message.",
      "required": [
        "content"
      ],
      "type": "object",
      "properties": {
        "content": {
          "description": "The content of the citation.",
          "type": "string"
        },
        "title": {
          "description": "The title of the citation.",
          "type": "string"
        },
        "url": {
          "description": "The URL of the citation.",
          "type": "string"
        },
        "filepath": {
          "description": "The file path of the citation.",
          "type": "string"
        },
        "chunk_id": {
          "description": "The chunk ID of the citation.",
          "type": "string"
        }
      }
    },
    "chatCompletionMessageToolCall": {
      "required": [
        "id",
        "type",
        "function"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the tool call.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/toolCallType"
        },
        "function": {
          "description": "The function that the model called.",
          "required": [
            "name",
            "arguments"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the function to call.",
              "type": "string"
            },
            "arguments": {
              "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
              "type": "string"
            }
          }
        }
      }
    },
    "toolCallType": {
      "description": "The type of the tool call, in this case `function`.",
      "enum": [
        "function"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ToolCallType",
        "modelAsString": true,
        "values": [
          {
            "value": "function",
            "description": "The tool call type is function."
          }
        ]
      }
    },
    "chatCompletionRequestMessageTool": {
      "required": [
        "tool_call_id",
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/chatCompletionRequestMessage"
        },
        {
          "type": "object",
          "properties": {
            "tool_call_id": {
              "description": "Tool call that this message is responding to.",
              "type": "string"
            },
            "content": {
              "description": "The contents of the message.",
              "type": "string"
            }
          }
        }
      ]
    },
    "chatCompletionRequestMessageFunction": {
      "required": [
        "function_call_id",
        "content"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/chatCompletionRequestMessage"
        },
        {
          "description": "Deprecated. Message that represents a function.",
          "type": "object",
          "properties": {
            "role": {
              "description": "The role of the messages author, in this case `function`.",
              "enum": [
                "function"
              ],
              "type": "string"
            },
            "name": {
              "description": "The contents of the message.",
              "type": "string"
            },
            "content": {
              "description": "The contents of the message.",
              "type": "string"
            }
          }
        }
      ]
    },
    "createChatCompletionResponse": {
      "required": [
        "id",
        "object",
        "created",
        "model",
        "choices"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/chatCompletionsResponseCommon"
        },
        {
          "properties": {
            "prompt_filter_results": {
              "$ref": "#/definitions/promptFilterResults"
            },
            "choices": {
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/chatCompletionChoiceCommon"
                  },
                  {
                    "properties": {
                      "message": {
                        "$ref": "#/definitions/chatCompletionResponseMessage"
                      },
                      "content_filter_results": {
                        "$ref": "#/definitions/contentFilterChoiceResults"
                      },
                      "logprobs": {
                        "$ref": "#/definitions/chatCompletionChoiceLogProbs"
                      },
                      "enhancements": {
                        "$ref": "#/definitions/enhancement"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "chatCompletionChoiceLogProbs": {
      "description": "Log probability information for the choice.",
      "required": [
        "content"
      ],
      "type": "object",
      "properties": {
        "content": {
          "description": "A list of message content tokens with log probability information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/chatCompletionTokenLogprob"
          }
        }
      }
    },
    "chatCompletionTokenLogprob": {
      "required": [
        "token",
        "logprob",
        "bytes",
        "top_logprobs"
      ],
      "type": "object",
      "properties": {
        "token": {
          "description": "The token.",
          "type": "string"
        },
        "logprob": {
          "description": "The log probability of this token.",
          "type": "number"
        },
        "bytes": {
          "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "top_logprobs": {
          "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
          "type": "array",
          "items": {
            "required": [
              "token",
              "logprob",
              "bytes"
            ],
            "type": "object",
            "properties": {
              "token": {
                "description": "The token.",
                "type": "string"
              },
              "logprob": {
                "description": "The log probability of this token.",
                "type": "number"
              },
              "bytes": {
                "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "chatCompletionResponseMessage": {
      "description": "A chat completion message generated by the model.",
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/chatCompletionResponseMessageRole"
        },
        "content": {
          "description": "The contents of the message.",
          "type": "string"
        },
        "tool_calls": {
          "description": "The tool calls generated by the model, such as function calls.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/chatCompletionMessageToolCall"
          }
        },
        "function_call": {
          "$ref": "#/definitions/chatCompletionFunctionCall"
        },
        "context": {
          "$ref": "#/definitions/azureChatExtensionsMessageContext"
        }
      }
    },
    "chatCompletionResponseMessageRole": {
      "description": "The role of the author of the response message.",
      "enum": [
        "assistant"
      ],
      "type": "string"
    },
    "chatCompletionToolChoiceOption": {
      "description": "Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that function.",
      "allOf": [
        {
          "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.",
          "enum": [
            "none",
            "auto"
          ],
          "type": "string"
        }
      ]
    },
    "chatCompletionNamedToolChoice": {
      "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the tool. Currently, only `function` is supported.",
          "enum": [
            "function"
          ],
          "type": "string"
        },
        "function": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the function to call.",
              "type": "string"
            }
          }
        }
      }
    },
    "chatCompletionFunctionCall": {
      "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
      "required": [
        "name",
        "arguments"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the function to call.",
          "type": "string"
        },
        "arguments": {
          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
          "type": "string"
        }
      }
    },
    "chatCompletionsResponseCommon": {
      "required": [
        "id",
        "object",
        "created",
        "model"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier for the chat completion.",
          "type": "string"
        },
        "object": {
          "$ref": "#/definitions/chatCompletionResponseObject"
        },
        "created": {
          "format": "unixtime",
          "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
          "type": "integer"
        },
        "model": {
          "description": "The model used for the chat completion.",
          "type": "string"
        },
        "usage": {
          "$ref": "#/definitions/completionUsage"
        },
        "system_fingerprint": {
          "description": "Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.",
          "type": "string"
        }
      }
    },
    "chatCompletionResponseObject": {
      "description": "The object type.",
      "enum": [
        "chat.completion"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ChatCompletionResponseObject",
        "modelAsString": true,
        "values": [
          {
            "value": "chat.completion",
            "description": "The object type is chat completion."
          }
        ]
      }
    },
    "completionUsage": {
      "description": "Usage statistics for the completion request.",
      "required": [
        "prompt_tokens",
        "completion_tokens",
        "total_tokens"
      ],
      "type": "object",
      "properties": {
        "prompt_tokens": {
          "description": "Number of tokens in the prompt.",
          "type": "integer"
        },
        "completion_tokens": {
          "description": "Number of tokens in the generated completion.",
          "type": "integer"
        },
        "total_tokens": {
          "description": "Total number of tokens used in the request (prompt + completion).",
          "type": "integer"
        }
      }
    },
    "chatCompletionTool": {
      "required": [
        "type",
        "function"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/chatCompletionToolType"
        },
        "function": {
          "required": [
            "name",
            "parameters"
          ],
          "type": "object",
          "properties": {
            "description": {
              "description": "A description of what the function does, used by the model to choose when and how to call the function.",
              "type": "string"
            },
            "name": {
              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
              "type": "string"
            },
            "parameters": {
              "$ref": "#/definitions/chatCompletionFunctionParameters"
            }
          }
        }
      }
    },
    "chatCompletionToolType": {
      "description": "The type of the tool. Currently, only `function` is supported.",
      "enum": [
        "function"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ChatCompletionToolType",
        "modelAsString": true,
        "values": [
          {
            "value": "function",
            "description": "The tool type is function."
          }
        ]
      }
    },
    "chatCompletionChoiceCommon": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer"
        },
        "finish_reason": {
          "type": "string"
        }
      }
    },
    "createTranslationRequest": {
      "description": "Translation request.",
      "required": [
        "file"
      ],
      "type": "object",
      "properties": {
        "file": {
          "format": "binary",
          "description": "The audio file to translate.",
          "type": "string"
        },
        "prompt": {
          "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should be in English.",
          "type": "string"
        },
        "response_format": {
          "$ref": "#/definitions/audioResponseFormat"
        },
        "temperature": {
          "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.",
          "default": 0.0,
          "type": "number"
        }
      }
    },
    "audioResponse": {
      "description": "Translation or transcription response when response_format was json",
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "text": {
          "description": "Translated or transcribed text.",
          "type": "string"
        }
      }
    },
    "audioVerboseResponse": {
      "description": "Translation or transcription response when response_format was verbose_json",
      "required": [
        "text"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/audioResponse"
        },
        {
          "properties": {
            "task": {
              "description": "Type of audio task.",
              "enum": [
                "transcribe",
                "translate"
              ],
              "type": "string",
              "x-ms-enum": {
                "modelAsString": true
              }
            },
            "language": {
              "description": "Language.",
              "type": "string"
            },
            "duration": {
              "description": "Duration.",
              "type": "number"
            },
            "segments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/audioSegment"
              }
            }
          }
        }
      ]
    },
    "audioResponseFormat": {
      "title": "AudioResponseFormat",
      "description": "Defines the format of the output.",
      "enum": [
        "json",
        "text",
        "srt",
        "verbose_json",
        "vtt"
      ],
      "type": "string",
      "x-ms-enum": {
        "modelAsString": true
      }
    },
    "createTranscriptionRequest": {
      "description": "Transcription request.",
      "required": [
        "file"
      ],
      "type": "object",
      "properties": {
        "file": {
          "format": "binary",
          "description": "The audio file object to transcribe.",
          "type": "string"
        },
        "prompt": {
          "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language.",
          "type": "string"
        },
        "response_format": {
          "$ref": "#/definitions/audioResponseFormat"
        },
        "temperature": {
          "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.",
          "default": 0.0,
          "type": "number"
        },
        "language": {
          "description": "The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency.",
          "type": "string"
        }
      }
    },
    "audioSegment": {
      "description": "Transcription or translation segment.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Segment identifier.",
          "type": "integer"
        },
        "seek": {
          "description": "Offset of the segment.",
          "type": "number"
        },
        "start": {
          "description": "Segment start offset.",
          "type": "number"
        },
        "end": {
          "description": "Segment end offset.",
          "type": "number"
        },
        "text": {
          "description": "Segment text.",
          "type": "string"
        },
        "tokens": {
          "description": "Tokens of the text.",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "temperature": {
          "description": "Temperature.",
          "type": "number"
        },
        "avg_logprob": {
          "description": "Average log probability.",
          "type": "number"
        },
        "compression_ratio": {
          "description": "Compression ratio.",
          "type": "number"
        },
        "no_speech_prob": {
          "description": "Probability of 'no speech'.",
          "type": "number"
        }
      }
    },
    "createSpeechRequest": {
      "description": "Speech request.",
      "required": [
        "input",
        "voice"
      ],
      "type": "object",
      "properties": {
        "input": {
          "description": "The text to synthesize audio for. The maximum length is 4096 characters.",
          "maxLength": 4096,
          "type": "string"
        },
        "voice": {
          "description": "The voice to use for speech synthesis.",
          "enum": [
            "alloy",
            "echo",
            "fable",
            "onyx",
            "nova",
            "shimmer"
          ],
          "type": "string"
        },
        "response_format": {
          "description": "The format to synthesize the audio in.",
          "enum": [
            "mp3",
            "opus",
            "aac",
            "flac"
          ],
          "type": "string"
        },
        "speed": {
          "description": "The speed of the synthesize audio. Select a value from `0.25` to `4.0`. `1.0` is the default.",
          "default": 1.0,
          "maximum": 4.0,
          "minimum": 0.25,
          "type": "number"
        }
      }
    },
    "imageQuality": {
      "description": "The quality of the image that will be generated.",
      "default": "standard",
      "enum": [
        "standard",
        "hd"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "Quality",
        "modelAsString": true,
        "values": [
          {
            "value": "standard",
            "description": "Standard quality creates images with standard quality.",
            "name": "Standard"
          },
          {
            "value": "hd",
            "description": "HD quality creates images with finer details and greater consistency across the image.",
            "name": "HD"
          }
        ]
      }
    },
    "imagesResponseFormat": {
      "description": "The format in which the generated images are returned.",
      "default": "url",
      "enum": [
        "url",
        "b64_json"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "ImagesResponseFormat",
        "modelAsString": true,
        "values": [
          {
            "value": "url",
            "description": "The URL that provides temporary access to download the generated images.",
            "name": "Url"
          },
          {
            "value": "b64_json",
            "description": "The generated images are returned as base64 encoded string.",
            "name": "Base64Json"
          }
        ]
      }
    },
    "imageSize": {
      "description": "The size of the generated images.",
      "default": "1024x1024",
      "enum": [
        "1792x1024",
        "1024x1792",
        "1024x1024"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "Size",
        "modelAsString": true,
        "values": [
          {
            "value": "1792x1024",
            "description": "The desired size of the generated image is 1792x1024 pixels.",
            "name": "Size1792x1024"
          },
          {
            "value": "1024x1792",
            "description": "The desired size of the generated image is 1024x1792 pixels.",
            "name": "Size1024x1792"
          },
          {
            "value": "1024x1024",
            "description": "The desired size of the generated image is 1024x1024 pixels.",
            "name": "Size1024x1024"
          }
        ]
      }
    },
    "imageStyle": {
      "description": "The style of the generated images.",
      "default": "vivid",
      "enum": [
        "vivid",
        "natural"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "Style",
        "modelAsString": true,
        "values": [
          {
            "value": "vivid",
            "description": "Vivid creates images that are hyper-realistic and dramatic.",
            "name": "Vivid"
          },
          {
            "value": "natural",
            "description": "Natural creates images that are more natural and less hyper-realistic.",
            "name": "Natural"
          }
        ]
      }
    },
    "imageGenerationsRequest": {
      "required": [
        "prompt"
      ],
      "type": "object",
      "properties": {
        "prompt": {
          "format": "string",
          "description": "A text description of the desired image(s). The maximum length is 4000 characters.",
          "minLength": 1,
          "type": "string",
          "example": "a corgi in a field"
        },
        "n": {
          "description": "The number of images to generate.",
          "default": 1,
          "maximum": 1.0,
          "minimum": 1.0,
          "type": "integer"
        },
        "size": {
          "$ref": "#/definitions/imageSize"
        },
        "response_format": {
          "$ref": "#/definitions/imagesResponseFormat"
        },
        "user": {
          "format": "string",
          "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.",
          "type": "string",
          "example": "user123456"
        },
        "quality": {
          "$ref": "#/definitions/imageQuality"
        },
        "style": {
          "$ref": "#/definitions/imageStyle"
        }
      },
      "example": {
        "prompt": "a corgi in a field",
        "n": 1,
        "size": "1024x1024",
        "response_format": "url",
        "user": "user123456",
        "quality": "standard",
        "style": "vivid"
      }
    },
    "generateImagesResponse": {
      "required": [
        "created",
        "data"
      ],
      "type": "object",
      "properties": {
        "created": {
          "format": "unixtime",
          "description": "The unix timestamp when the operation was created.",
          "type": "integer",
          "example": "1676540381"
        },
        "data": {
          "description": "The result data of the operation, if successful",
          "type": "array",
          "items": {
            "$ref": "#/definitions/imageResult"
          }
        }
      }
    },
    "imageResult": {
      "description": "The image url or encoded image if successful, and an error otherwise.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The image url.",
          "type": "string",
          "example": "https://www.contoso.com"
        },
        "b64_json": {
          "description": "The base64 encoded image",
          "type": "string"
        },
        "content_filter_results": {
          "$ref": "#/definitions/dalleContentFilterResults"
        },
        "revised_prompt": {
          "description": "The prompt that was used to generate the image, if there was any revision to the prompt.",
          "type": "string"
        },
        "prompt_filter_results": {
          "$ref": "#/definitions/dalleFilterResults"
        }
      }
    },
    "enhancement": {
      "type": "object",
      "properties": {
        "grounding": {
          "description": "The grounding enhancement that returns the bounding box of the objects detected in the image.",
          "required": [
            "lines"
          ],
          "type": "object",
          "properties": {
            "lines": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/line"
              }
            }
          }
        }
      }
    },
    "line": {
      "description": "A content line object consisting of an adjacent sequence of content elements, such as words and selection marks.",
      "required": [
        "text",
        "spans"
      ],
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "spans": {
          "description": "An array of spans that represent detected objects and its bounding box information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/span"
          }
        }
      }
    },
    "span": {
      "description": "A span object that represents a detected object and its bounding box information.",
      "required": [
        "text",
        "offset",
        "length",
        "polygon"
      ],
      "type": "object",
      "properties": {
        "text": {
          "description": "The text content of the span that represents the detected object.",
          "type": "string"
        },
        "offset": {
          "description": "The character offset within the text where the span begins. This offset is defined as the position of the first character of the span, counting from the start of the text as Unicode codepoints.",
          "type": "integer"
        },
        "length": {
          "description": "The length of the span in characters, measured in Unicode codepoints.",
          "type": "integer"
        },
        "polygon": {
          "description": "An array of objects representing points in the polygon that encloses the detected object.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "x": {
                "description": "The x-coordinate of the point.",
                "type": "number"
              },
              "y": {
                "description": "The y-coordinate of the point.",
                "type": "number"
              }
            }
          }
        }
      }
    },
    "assistantObject": {
      "title": "Assistant",
      "description": "Represents an `assistant` that can call the model and use tools.",
      "required": [
        "id",
        "object",
        "created_at",
        "name",
        "description",
        "model",
        "instructions",
        "tools",
        "file_ids",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `assistant`.",
          "enum": [
            "assistant"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AssistantObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "assistant",
                "description": "The object type, which is always assistant"
              }
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the assistant was created.",
          "type": "integer"
        },
        "name": {
          "description": "The name of the assistant. The maximum length is 256 characters.\n",
          "maxLength": 256,
          "type": "string"
        },
        "description": {
          "description": "The description of the assistant. The maximum length is 512 characters.\n",
          "maxLength": 512,
          "type": "string"
        },
        "model": {
          "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n",
          "type": "string"
        },
        "instructions": {
          "description": "The system instructions that the assistant uses. The maximum length is 32768 characters.\n",
          "maxLength": 32768,
          "type": "string"
        },
        "tools": {
          "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n",
          "maxItems": 128,
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/assistantToolsCode"
              }
            ]
          }
        },
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.\n",
          "maxItems": 20,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      }
    },
    "createAssistantRequest": {
      "required": [
        "model"
      ],
      "type": "object",
      "properties": {
        "model": {
          "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n",
          "allOf": [
            {
              "type": "string"
            }
          ]
        },
        "name": {
          "description": "The name of the assistant. The maximum length is 256 characters.\n",
          "maxLength": 256,
          "type": "string"
        },
        "description": {
          "description": "The description of the assistant. The maximum length is 512 characters.\n",
          "maxLength": 512,
          "type": "string"
        },
        "instructions": {
          "description": "The system instructions that the assistant uses. The maximum length is 32768 characters.\n",
          "maxLength": 32768,
          "type": "string"
        },
        "tools": {
          "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n",
          "maxItems": 128,
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/assistantToolsCode"
              }
            ]
          }
        },
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.\n",
          "maxItems": 20,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      },
      "additionalProperties": false,
      "example": {
        "model": {},
        "name": "string",
        "description": "string",
        "instructions": "string",
        "tools": [
          {
            "type": "code_interpreter"
          }
        ],
        "file_ids": [
          "string"
        ],
        "metadata": {}
      }
    },
    "modifyAssistantRequest": {
      "type": "object",
      "properties": {
        "model": {
          "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n",
          "allOf": [
            {
              "type": "string"
            }
          ]
        },
        "name": {
          "description": "The name of the assistant. The maximum length is 256 characters.\n",
          "maxLength": 256,
          "type": "string"
        },
        "description": {
          "description": "The description of the assistant. The maximum length is 512 characters.\n",
          "maxLength": 512,
          "type": "string"
        },
        "instructions": {
          "description": "The system instructions that the assistant uses. The maximum length is 32768 characters.\n",
          "maxLength": 32768,
          "type": "string"
        },
        "tools": {
          "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n",
          "maxItems": 128,
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/assistantToolsCode"
              }
            ]
          }
        },
        "file_ids": {
          "description": "A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previously attached to the list but does not show up in the list, it will be deleted from the assistant.\n",
          "maxItems": 20,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      },
      "additionalProperties": false,
      "example": {
        "model": {},
        "name": "string",
        "description": "string",
        "instructions": "string",
        "tools": [
          {
            "type": "code_interpreter"
          }
        ],
        "file_ids": [
          "string"
        ],
        "metadata": {}
      }
    },
    "deleteAssistantResponse": {
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "enum": [
            "assistant.deleted"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DeleteAssistantResponseState",
            "modelAsString": true,
            "values": [
              {
                "value": "assistant.deleted",
                "description": "The assistant is deleted"
              }
            ]
          }
        }
      }
    },
    "listAssistantsResponse": {
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "type": "object",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/assistantObject"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "assistantToolsCode": {
      "title": "Code interpreter tool",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of tool being defined: `code_interpreter`",
          "enum": [
            "code_interpreter"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "assistantToolsCodeType",
            "modelAsString": true,
            "values": [
              {
                "value": "code_interpreter",
                "description": "code_interpreter as type of tool being defined"
              }
            ]
          }
        }
      }
    },
    "assistantToolsRetrieval": {
      "title": "Retrieval tool",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of tool being defined: `retrieval`",
          "enum": [
            "retrieval"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "assistantToolsRetrievalType",
            "modelAsString": true,
            "values": [
              {
                "value": "retrieval",
                "description": "retrieval as type of tool being defined"
              }
            ]
          }
        }
      }
    },
    "assistantToolsFunction": {
      "title": "Function tool",
      "required": [
        "type",
        "function"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of tool being defined: `function`",
          "enum": [
            "function"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "assistantToolsFunction",
            "modelAsString": true,
            "values": [
              {
                "value": "retrieval",
                "description": "retrieval as type of tool being defined"
              }
            ]
          }
        },
        "function": {
          "description": "The function definition.",
          "required": [
            "name",
            "parameters",
            "description"
          ],
          "type": "object",
          "properties": {
            "description": {
              "description": "A description of what the function does, used by the model to choose when and how to call the function.",
              "type": "string"
            },
            "name": {
              "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
              "type": "string"
            },
            "parameters": {
              "$ref": "#/definitions/chatCompletionFunctionParameters"
            }
          }
        }
      }
    },
    "runObject": {
      "title": "A run on a thread",
      "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
      "required": [
        "id",
        "object",
        "created_at",
        "thread_id",
        "assistant_id",
        "status",
        "required_action",
        "last_error",
        "expires_at",
        "started_at",
        "cancelled_at",
        "failed_at",
        "completed_at",
        "model",
        "instructions",
        "tools",
        "file_ids",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread.run`.",
          "enum": [
            "thread.run"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "runObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "thread.run",
                "description": "The run object type which is always thread.run"
              }
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the run was created.",
          "type": "integer"
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
          "type": "string"
        },
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
          "type": "string"
        },
        "status": {
          "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.",
          "enum": [
            "queued",
            "in_progress",
            "requires_action",
            "cancelling",
            "cancelled",
            "failed",
            "completed",
            "expired"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunObjectStatus",
            "modelAsString": true,
            "values": [
              {
                "value": "queued",
                "description": "The queued state"
              },
              {
                "value": "in_progress",
                "description": "The in_progress state"
              },
              {
                "value": "requires_action",
                "description": "The required_action state"
              },
              {
                "value": "cancelling",
                "description": "The cancelling state"
              },
              {
                "value": "cancelled",
                "description": "The cancelled state"
              },
              {
                "value": "failed",
                "description": "The failed state"
              },
              {
                "value": "completed",
                "description": "The completed state"
              },
              {
                "value": "expired",
                "description": "The expired state"
              }
            ]
          }
        },
        "required_action": {
          "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
          "required": [
            "type",
            "submit_tool_outputs"
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "For now, this is always `submit_tool_outputs`.",
              "enum": [
                "submit_tool_outputs"
              ],
              "type": "string"
            },
            "submit_tool_outputs": {
              "description": "Details on the tool outputs needed for this run to continue.",
              "required": [
                "tool_calls"
              ],
              "type": "object",
              "properties": {
                "tool_calls": {
                  "description": "A list of the relevant tool calls.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/runToolCallObject"
                  }
                }
              }
            }
          }
        },
        "last_error": {
          "description": "The last error associated with this run. Will be `null` if there are no errors.",
          "required": [
            "code",
            "message"
          ],
          "type": "object",
          "properties": {
            "code": {
              "description": "One of `server_error` or `rate_limit_exceeded`.",
              "enum": [
                "server_error",
                "rate_limit_exceeded"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "LastErrorCode",
                "modelAsString": true,
                "values": [
                  {
                    "value": "server_error",
                    "description": "The server failed to respond to request due to server error"
                  },
                  {
                    "value": "rate_limit_exceeded",
                    "description": "The server failed to respond to request due to rate limit exceeded"
                  }
                ]
              }
            },
            "message": {
              "description": "A human-readable description of the error.",
              "type": "string"
            }
          }
        },
        "expires_at": {
          "description": "The Unix timestamp (in seconds) for when the run will expire.",
          "type": "integer"
        },
        "started_at": {
          "description": "The Unix timestamp (in seconds) for when the run was started.",
          "type": "integer"
        },
        "cancelled_at": {
          "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
          "type": "integer"
        },
        "failed_at": {
          "description": "The Unix timestamp (in seconds) for when the run failed.",
          "type": "integer"
        },
        "completed_at": {
          "description": "The Unix timestamp (in seconds) for when the run was completed.",
          "type": "integer"
        },
        "model": {
          "description": "The model that the [assistant](/docs/api-reference/assistants) used for this run.",
          "type": "string"
        },
        "instructions": {
          "description": "The instructions that the [assistant](/docs/api-reference/assistants) used for this run.",
          "type": "string"
        },
        "tools": {
          "description": "The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.",
          "maxItems": 20,
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/assistantToolsCode"
              }
            ]
          }
        },
        "file_ids": {
          "description": "The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      }
    },
    "createRunRequest": {
      "required": [
        "thread_id",
        "assistant_id"
      ],
      "type": "object",
      "properties": {
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.",
          "type": "string"
        },
        "model": {
          "description": "The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
          "type": "string"
        },
        "instructions": {
          "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "type": "string"
        },
        "tools": {
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "maxItems": 20,
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/assistantToolsCode"
              }
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      },
      "additionalProperties": false,
      "example": {
        "assistant_id": "string",
        "model": "string",
        "instructions": "string",
        "tools": [
          {
            "type": "code_interpreter"
          }
        ],
        "metadata": {}
      }
    },
    "listRunsResponse": {
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "type": "object",
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/runObject"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "modifyRunRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      },
      "additionalProperties": false,
      "example": {
        "metadata": {}
      }
    },
    "submitToolOutputsRunRequest": {
      "required": [
        "tool_outputs"
      ],
      "type": "object",
      "properties": {
        "tool_outputs": {
          "description": "A list of tools for which the outputs are being submitted.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "tool_call_id": {
                "description": "The ID of the tool call in the `required_action` object within the run object the output is being submitted for.",
                "type": "string"
              },
              "output": {
                "description": "The output of the tool call to be submitted to continue the run.",
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false,
      "example": {
        "tool_outputs": [
          {
            "tool_call_id": "string",
            "output": "string"
          }
        ]
      }
    },
    "runToolCallObject": {
      "description": "Tool call objects",
      "required": [
        "id",
        "type",
        "function"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.",
          "type": "string"
        },
        "type": {
          "description": "The type of tool call the output is required for. For now, this is always `function`.",
          "enum": [
            "function"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunToolCallObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "function",
                "description": "The type of tool call the output is required for which is always `function` for now"
              },
              {
                "value": "rate_limit_exceeded",
                "description": "The server failed to respond to request due to rate limit exceeded"
              }
            ]
          }
        },
        "function": {
          "description": "The function definition.",
          "required": [
            "name",
            "arguments"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the function.",
              "type": "string"
            },
            "arguments": {
              "description": "The arguments that the model expects you to pass to the function.",
              "type": "string"
            }
          }
        }
      }
    },
    "createThreadAndRunRequest": {
      "required": [
        "thread_id",
        "assistant_id"
      ],
      "type": "object",
      "properties": {
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.",
          "type": "string"
        },
        "thread": {
          "$ref": "#/definitions/createThreadRequest"
        },
        "model": {
          "description": "The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
          "type": "string"
        },
        "instructions": {
          "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "type": "string"
        },
        "tools": {
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "maxItems": 20,
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/assistantToolsCode"
              }
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      },
      "additionalProperties": false,
      "example": {
        "assistant_id": "string",
        "thread": {
          "messages": [
            {
              "role": "user",
              "content": "string",
              "file_ids": [
                "string"
              ],
              "metadata": {}
            }
          ],
          "metadata": {}
        },
        "model": "string",
        "instructions": "string",
        "tools": [
          {
            "type": "code_interpreter"
          }
        ],
        "metadata": {}
      }
    },
    "threadObject": {
      "title": "Thread",
      "description": "Represents a thread that contains [messages](/docs/api-reference/messages).",
      "required": [
        "id",
        "object",
        "created_at",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread`.",
          "enum": [
            "thread"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ThreadObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "thread",
                "description": "The type of thread object which is always `thread`"
              }
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the thread was created.",
          "type": "integer"
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      }
    },
    "createThreadRequest": {
      "type": "object",
      "properties": {
        "messages": {
          "description": "A list of [messages](/docs/api-reference/messages) to start the thread with.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/createMessageRequest"
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      },
      "additionalProperties": false,
      "example": {
        "messages": [
          {
            "role": "user",
            "content": "string",
            "file_ids": [
              "string"
            ],
            "metadata": {}
          }
        ],
        "metadata": {}
      }
    },
    "modifyThreadRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      },
      "additionalProperties": false,
      "example": {
        "metadata": {}
      }
    },
    "deleteThreadResponse": {
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "enum": [
            "thread.deleted"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DeleteThreadResponseObjectState",
            "modelAsString": true,
            "values": [
              {
                "value": "thread.deleted",
                "description": "The delete thread response object state which is `thread.deleted`"
              }
            ]
          }
        }
      }
    },
    "listThreadsResponse": {
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/threadObject"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "messageObject": {
      "title": "The message object",
      "description": "Represents a message within a [thread](/docs/api-reference/threads).",
      "required": [
        "id",
        "object",
        "created_at",
        "thread_id",
        "role",
        "content",
        "assistant_id",
        "run_id",
        "file_ids",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread.message`.",
          "enum": [
            "thread.message"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MessageObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "thread.message",
                "description": "The message object type which is `thread.message`"
              }
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the message was created.",
          "type": "integer"
        },
        "thread_id": {
          "description": "The [thread](/docs/api-reference/threads) ID that this message belongs to.",
          "type": "string"
        },
        "role": {
          "description": "The entity that produced the message. One of `user` or `assistant`.",
          "enum": [
            "user",
            "assistant"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MessageObjectRole",
            "modelAsString": true,
            "values": [
              {
                "value": "user",
                "description": "Message object role as `user`"
              },
              {
                "value": "assistant",
                "description": "Message object role as `assistant`"
              }
            ]
          }
        },
        "content": {
          "description": "The content of the message in array of text and/or images.",
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/messageContentImageFileObject"
              }
            ]
          }
        },
        "assistant_id": {
          "description": "If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.",
          "type": "string"
        },
        "run_id": {
          "description": "If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.",
          "type": "string"
        },
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.",
          "maxItems": 10,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      }
    },
    "createMessageRequest": {
      "required": [
        "role",
        "content"
      ],
      "type": "object",
      "properties": {
        "role": {
          "description": "The role of the entity that is creating the message. Currently only `user` is supported.",
          "enum": [
            "user"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "CreateMessageRequestRole",
            "modelAsString": true,
            "values": [
              {
                "value": "user",
                "description": "The create message role as `user`"
              }
            ]
          }
        },
        "content": {
          "description": "The content of the message.",
          "maxLength": 32768,
          "minLength": 1,
          "type": "string"
        },
        "file_ids": {
          "description": "A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.",
          "maxItems": 10,
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      },
      "additionalProperties": false,
      "example": {
        "role": "user",
        "content": "string",
        "file_ids": [
          "string"
        ],
        "metadata": {}
      }
    },
    "modifyMessageRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      },
      "additionalProperties": false,
      "example": {
        "metadata": {}
      }
    },
    "deleteMessageResponse": {
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "enum": [
            "thread.message.deleted"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DeleteMessageResponseObject",
            "modelAsString": true,
            "values": [
              {
                "value": "thread.message.deleted",
                "description": "The delete message response object state"
              }
            ]
          }
        }
      }
    },
    "listMessagesResponse": {
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messageObject"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "messageContentImageFileObject": {
      "title": "Image file",
      "description": "References an image [File](/docs/api-reference/files) in the content of a message.",
      "required": [
        "type",
        "image_file"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Always `image_file`.",
          "enum": [
            "image_file"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MessageContentImageFileObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "image_file",
                "description": "The message content image file type"
              }
            ]
          }
        },
        "image_file": {
          "required": [
            "file_id"
          ],
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The [File](/docs/api-reference/files) ID of the image in the message content.",
              "type": "string"
            }
          }
        }
      }
    },
    "messageContentTextObject": {
      "title": "Text",
      "description": "The text content that is part of a message.",
      "required": [
        "type",
        "text"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Always `text`.",
          "enum": [
            "text"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "messageContentTextObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "text",
                "description": "The message content text Object type"
              }
            ]
          }
        },
        "text": {
          "required": [
            "value",
            "annotations"
          ],
          "type": "object",
          "properties": {
            "value": {
              "description": "The data that makes up the text.",
              "type": "string"
            },
            "annotations": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/messageContentTextAnnotationsFileCitationObject"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "messageContentTextAnnotationsFileCitationObject": {
      "title": "File citation",
      "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files.",
      "required": [
        "type",
        "text",
        "file_citation",
        "start_index",
        "end_index"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Always `file_citation`.",
          "enum": [
            "file_citation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "FileCitationObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "file_citation",
                "description": "The file citation object type"
              }
            ]
          }
        },
        "text": {
          "description": "The text in the message content that needs to be replaced.",
          "type": "string"
        },
        "file_citation": {
          "required": [
            "file_id",
            "quote"
          ],
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The ID of the specific File the citation is from.",
              "type": "string"
            },
            "quote": {
              "description": "The specific quote in the file.",
              "type": "string"
            }
          }
        },
        "start_index": {
          "minimum": 0.0,
          "type": "integer"
        },
        "end_index": {
          "minimum": 0.0,
          "type": "integer"
        }
      }
    },
    "messageContentTextAnnotationsFilePathObject": {
      "title": "File path",
      "description": "A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.",
      "required": [
        "type",
        "text",
        "file_path",
        "start_index",
        "end_index"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Always `file_path`.",
          "enum": [
            "file_path"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "FilePathObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "file_path",
                "description": "The file path object type"
              }
            ]
          }
        },
        "text": {
          "description": "The text in the message content that needs to be replaced.",
          "type": "string"
        },
        "file_path": {
          "required": [
            "file_id"
          ],
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The ID of the file that was generated.",
              "type": "string"
            }
          }
        },
        "start_index": {
          "minimum": 0.0,
          "type": "integer"
        },
        "end_index": {
          "minimum": 0.0,
          "type": "integer"
        }
      }
    },
    "runStepObject": {
      "title": "Run steps",
      "description": "Represents a step in execution of a run.\n",
      "required": [
        "id",
        "object",
        "created_at",
        "assistant_id",
        "thread_id",
        "run_id",
        "type",
        "status",
        "step_details",
        "last_error",
        "expired_at",
        "cancelled_at",
        "failed_at",
        "completed_at",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier of the run step, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `assistant.run.step``.",
          "enum": [
            "assistant.run.step"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "assistant.run.step",
                "description": "The object type, which is always `assistant.run.step`"
              }
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the run step was created.",
          "type": "integer"
        },
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.",
          "type": "string"
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
          "type": "string"
        },
        "run_id": {
          "description": "The ID of the [run](/docs/api-reference/runs) that this run step is a part of.",
          "type": "string"
        },
        "type": {
          "description": "The type of run step, which can be either `message_creation` or `tool_calls`.",
          "enum": [
            "message_creation",
            "tool_calls"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "message_creation",
                "description": "The message_creation run step"
              },
              {
                "value": "tool_calls",
                "description": "The tool_calls run step"
              }
            ]
          }
        },
        "status": {
          "description": "The status of the run, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.",
          "enum": [
            "in_progress",
            "cancelled",
            "failed",
            "completed",
            "expired"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepObjectStatus",
            "modelAsString": true,
            "values": [
              {
                "value": "in_progress",
                "description": "The in_progress run status"
              },
              {
                "value": "cancelled",
                "description": "The cancelled run status"
              },
              {
                "value": "failed",
                "description": "The cancelled run status"
              },
              {
                "value": "completed",
                "description": "The cancelled run status"
              },
              {
                "value": "expired",
                "description": "The cancelled run status"
              }
            ]
          }
        },
        "step_details": {
          "description": "The details of the run step.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/runStepDetailsMessageCreationObject"
            }
          ]
        },
        "last_error": {
          "description": "The last error associated with this run step. Will be `null` if there are no errors.",
          "required": [
            "code",
            "message"
          ],
          "type": "object",
          "properties": {
            "code": {
              "description": "One of `server_error` or `rate_limit_exceeded`.",
              "enum": [
                "server_error",
                "rate_limit_exceeded"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "LastErrorCode",
                "modelAsString": true,
                "values": [
                  {
                    "value": "server_error",
                    "description": "The server_error"
                  },
                  {
                    "value": "rate_limit_exceeded",
                    "description": "The rate_limit_exceeded status"
                  }
                ]
              }
            },
            "message": {
              "description": "A human-readable description of the error.",
              "type": "string"
            }
          }
        },
        "expired_at": {
          "description": "The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.",
          "type": "integer"
        },
        "cancelled_at": {
          "description": "The Unix timestamp (in seconds) for when the run step was cancelled.",
          "type": "integer"
        },
        "failed_at": {
          "description": "The Unix timestamp (in seconds) for when the run step failed.",
          "type": "integer"
        },
        "completed_at": {
          "description": "The Unix timestamp (in seconds) for when the run step completed.",
          "type": "integer"
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
          "type": "object"
        }
      }
    },
    "listRunStepsResponse": {
      "required": [
        "object",
        "data",
        "first_id",
        "last_id",
        "has_more"
      ],
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/runStepObject"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "runStepDetailsMessageCreationObject": {
      "title": "Message creation",
      "description": "Details of the message creation by the run step.",
      "required": [
        "type",
        "message_creation"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Always `message_creation``.",
          "enum": [
            "message_creation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepDetailsMessageCreationObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "message_creation"
              }
            ]
          }
        },
        "message_creation": {
          "required": [
            "message_id"
          ],
          "type": "object",
          "properties": {
            "message_id": {
              "description": "The ID of the message that was created by this run step.",
              "type": "string"
            }
          }
        }
      }
    },
    "runStepDetailsToolCallsObject": {
      "title": "Tool calls",
      "description": "Details of the tool call.",
      "required": [
        "type",
        "tool_calls"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Always `tool_calls`.",
          "enum": [
            "tool_calls"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepDetailsToolCallsObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "tool_calls"
              }
            ]
          }
        },
        "tool_calls": {
          "description": "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.\n",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/definitions/runStepDetailsToolCallsCodeObject"
              }
            ]
          }
        }
      }
    },
    "runStepDetailsToolCallsCodeObject": {
      "title": "Code interpreter tool call",
      "description": "Details of the Code Interpreter tool call the run step was involved in.",
      "required": [
        "id",
        "type",
        "code_interpreter"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the tool call.",
          "type": "string"
        },
        "type": {
          "description": "The type of tool call. This is always going to be `code_interpreter` for this type of tool call.",
          "enum": [
            "code_interpreter"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepDetailsToolCallsCodeObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "code_interpreter"
              }
            ]
          }
        },
        "code_interpreter": {
          "description": "The Code Interpreter tool call definition.",
          "required": [
            "input",
            "outputs"
          ],
          "type": "object",
          "properties": {
            "input": {
              "description": "The input to the Code Interpreter tool call.",
              "type": "string"
            },
            "outputs": {
              "description": "The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.",
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/runStepDetailsToolCallsCodeOutputLogsObject"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "runStepDetailsToolCallsCodeOutputLogsObject": {
      "title": "Code interpreter log output",
      "description": "Text output from the Code Interpreter tool call as part of a run step.",
      "required": [
        "type",
        "logs"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Always `logs`.",
          "enum": [
            "logs"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepDetailsToolCallsCodeOutputLogsObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "code_interpreter"
              }
            ]
          }
        },
        "logs": {
          "description": "The text output from the Code Interpreter tool call.",
          "type": "string"
        }
      }
    },
    "runStepDetailsToolCallsCodeOutputImageObject": {
      "title": "Code interpreter image output",
      "required": [
        "type",
        "image"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Always `image`.",
          "enum": [
            "image"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepDetailsToolCallsCodeOutputImageObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "image"
              }
            ]
          }
        },
        "image": {
          "required": [
            "file_id"
          ],
          "type": "object",
          "properties": {
            "file_id": {
              "description": "The [file](/docs/api-reference/files) ID of the image.",
              "type": "string"
            }
          }
        }
      }
    },
    "runStepDetailsToolCallsRetrievalObject": {
      "title": "Retrieval tool call",
      "required": [
        "id",
        "type",
        "retrieval"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the tool call object.",
          "type": "string"
        },
        "type": {
          "description": "The type of tool call. This is always going to be `retrieval` for this type of tool call.",
          "enum": [
            "retrieval"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepDetailsToolCallsRetrievalObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "retrieval"
              }
            ]
          }
        },
        "retrieval": {
          "description": "For now, this is always going to be an empty object.",
          "type": "object"
        }
      }
    },
    "runStepDetailsToolCallsFunctionObject": {
      "title": "Function tool call",
      "required": [
        "id",
        "type",
        "function"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the tool call object.",
          "type": "string"
        },
        "type": {
          "description": "The type of tool call. This is always going to be `function` for this type of tool call.",
          "enum": [
            "function"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RunStepDetailsToolCallsFunctionObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "function"
              }
            ]
          }
        },
        "function": {
          "description": "The definition of the function that was called.",
          "required": [
            "name",
            "arguments",
            "output"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the function.",
              "type": "string"
            },
            "arguments": {
              "description": "The arguments passed to the function.",
              "type": "string"
            },
            "output": {
              "description": "The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.",
              "type": "string"
            }
          }
        }
      }
    },
    "assistantFileObject": {
      "title": "Assistant files",
      "description": "A list of [Files](/docs/api-reference/files) attached to an `assistant`.",
      "required": [
        "id",
        "object",
        "created_at",
        "assistant_id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `assistant.file`.",
          "enum": [
            "assistant.file"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AssistantFileObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "assistant.file"
              }
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the assistant file was created.",
          "type": "integer"
        },
        "assistant_id": {
          "description": "The assistant ID that the file is attached to.",
          "type": "string"
        }
      }
    },
    "createAssistantFileRequest": {
      "required": [
        "file_id"
      ],
      "type": "object",
      "properties": {
        "file_id": {
          "description": "A [File](/docs/api-reference/files) ID (with `purpose=\"assistants\"`) that the assistant should use. Useful for tools like `retrieval` and `code_interpreter` that can access files.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "example": {
        "file_id": "string"
      }
    },
    "deleteAssistantFileResponse": {
      "description": "Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.",
      "required": [
        "id",
        "object",
        "deleted"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "object": {
          "enum": [
            "assistant.file.deleted"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DeleteAssistantFileResponseType",
            "modelAsString": true,
            "values": [
              {
                "value": "assistant.file.deleted"
              }
            ]
          }
        }
      }
    },
    "listAssistantFilesResponse": {
      "required": [
        "object",
        "data",
        "items",
        "first_id",
        "last_id",
        "has_more"
      ],
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/assistantFileObject"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "messageFileObject": {
      "title": "Message files",
      "description": "A list of files attached to a `message`.",
      "required": [
        "id",
        "object",
        "created_at",
        "message_id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": "string"
        },
        "object": {
          "description": "The object type, which is always `thread.message.file`.",
          "enum": [
            "thread.message.file"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MessageFileObjectType",
            "modelAsString": true,
            "values": [
              {
                "value": "thread.message.file"
              }
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the message file was created.",
          "type": "integer"
        },
        "message_id": {
          "description": "The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files) is attached to.",
          "type": "string"
        }
      }
    },
    "listMessageFilesResponse": {
      "required": [
        "object",
        "data",
        "items",
        "first_id",
        "last_id",
        "has_more"
      ],
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/messageFileObject"
          }
        },
        "first_id": {
          "type": "string"
        },
        "last_id": {
          "type": "string"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "Deployments-deployment-id-CompletionsPostRequest-2": {
      "type": "object",
      "properties": {
        "prompt": {
          "description": "The prompt(s) to generate completions for, encoded as a string or array of strings.\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. Maximum allowed size of string list is 2048.",
          "allOf": [
            {
              "default": "",
              "type": "string",
              "example": "This is a test."
            }
          ]
        },
        "max_tokens": {
          "description": "The token count of your prompt plus max_tokens cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096). Has minimum of 0.",
          "default": 16,
          "type": "integer",
          "example": 16
        },
        "temperature": {
          "description": "What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.\nWe generally recommend altering this or top_p but not both.",
          "default": 1.0,
          "type": "number",
          "example": 1.0
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or temperature but not both.",
          "default": 1.0,
          "type": "number",
          "example": 1.0
        },
        "logit_bias": {
          "description": "Defaults to null. Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. As an example, you can pass {\"50256\" &#58; -100} to prevent the <|endoftext|> token from being generated.",
          "type": "object"
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help monitoring and detecting abuse",
          "type": "string"
        },
        "n": {
          "description": "How many completions to generate for each prompt. Minimum of 1 and maximum of 128 allowed.\nNote: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.",
          "default": 1,
          "type": "integer",
          "example": 1
        },
        "stream": {
          "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.",
          "default": false,
          "type": "boolean"
        },
        "logprobs": {
          "description": "Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.\nMinimum of 0 and maximum of 5 allowed.",
          "default": null,
          "type": "integer"
        },
        "suffix": {
          "description": "The suffix that comes after a completion of inserted text.",
          "type": "string"
        },
        "echo": {
          "description": "Echo back the prompt in addition to the completion",
          "default": false,
          "type": "boolean"
        },
        "stop": {
          "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
          "allOf": [
            {
              "default": "<|endoftext|>",
              "type": "string",
              "example": "\n"
            }
          ]
        },
        "completion_config": {
          "type": "string"
        },
        "presence_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
          "default": 0.0,
          "type": "number"
        },
        "frequency_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
          "default": 0.0,
          "type": "number"
        },
        "best_of": {
          "description": "Generates best_of completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\nWhen used with n, best_of controls the number of candidate completions and n specifies how many to return - best_of must be greater than n.\nNote: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop. Has maximum value of 128.",
          "type": "integer"
        }
      },
      "example": {
        "prompt": "Negate the following sentence.The price for bubblegum increased on thursday.\n\n Negated Sentence:",
        "max_tokens": 50
      }
    },
    "DeploymentsDeployment-idCompletionsPost200ApplicationJsonResponse": {
      "required": [
        "id",
        "object",
        "created",
        "model",
        "choices"
      ],
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "object": {
          "type": "string"
        },
        "created": {
          "type": "integer"
        },
        "model": {
          "type": "string"
        },
        "prompt_filter_results": {
          "$ref": "#/definitions/promptFilterResults"
        },
        "choices": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "text": {
                "type": "string"
              },
              "index": {
                "type": "integer"
              },
              "logprobs": {
                "type": "object",
                "properties": {
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "token_logprobs": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  },
                  "top_logprobs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "number"
                      }
                    }
                  },
                  "text_offset": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              },
              "finish_reason": {
                "type": "string"
              },
              "content_filter_results": {
                "$ref": "#/definitions/contentFilterChoiceResults"
              }
            }
          }
        },
        "usage": {
          "required": [
            "prompt_tokens",
            "total_tokens",
            "completion_tokens"
          ],
          "type": "object",
          "properties": {
            "completion_tokens": {
              "format": "int32",
              "type": "number"
            },
            "prompt_tokens": {
              "format": "int32",
              "type": "number"
            },
            "total_tokens": {
              "format": "int32",
              "type": "number"
            }
          }
        }
      }
    },
    "Deployments-deployment-id-EmbeddingsPostRequest-2": {
      "required": [
        "input"
      ],
      "type": "object",
      "properties": {
        "input": {
          "description": "Input text to get embeddings for, encoded as a string. To get embeddings for multiple inputs in a single request, pass an array of strings. Each input must not exceed 2048 tokens in length.\nUnless you are embedding code, we suggest replacing newlines (\\n) in your input with a single space, as we have observed inferior results when newlines are present.",
          "allOf": [
            {
              "default": "",
              "type": "string",
              "example": "This is a test."
            }
          ]
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help monitoring and detecting abuse.",
          "type": "string"
        },
        "input_type": {
          "description": "input type of embedding search to use",
          "type": "string",
          "example": "query"
        },
        "encoding_format": {
          "description": "The format to return the embeddings in. Can be either `float` or `base64`. Defaults to `float`.",
          "type": "string",
          "example": "float"
        },
        "dimensions": {
          "description": "The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.",
          "type": "integer",
          "example": 1
        }
      },
      "example": {
        "input": {},
        "user": "string",
        "input_type": "query",
        "encoding_format": "float",
        "dimensions": 1
      }
    },
    "DeploymentsDeployment-idEmbeddingsPost200ApplicationJsonResponse": {
      "required": [
        "object",
        "model",
        "data",
        "usage"
      ],
      "type": "object",
      "properties": {
        "object": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "required": [
              "index",
              "object",
              "embedding"
            ],
            "type": "object",
            "properties": {
              "index": {
                "type": "integer"
              },
              "object": {
                "type": "string"
              },
              "embedding": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        },
        "usage": {
          "required": [
            "prompt_tokens",
            "total_tokens"
          ],
          "type": "object",
          "properties": {
            "prompt_tokens": {
              "type": "integer"
            },
            "total_tokens": {
              "type": "integer"
            }
          }
        }
      }
    },
    "DeploymentsDeployment-idAudioTranscriptionsPost200ApplicationJsonResponse": {
      "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt).",
      "type": "string"
    },
    "DeploymentsDeployment-idAudioTranscriptionsPost200TextPlainResponse": {
      "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt).",
      "type": "string"
    },
    "DeploymentsDeployment-idAudioTranslationsPost200ApplicationJsonResponse": {
      "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt).",
      "type": "string"
    },
    "DeploymentsDeployment-idAudioTranslationsPost200TextPlainResponse": {
      "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt).",
      "type": "string"
    },
    "DeploymentsDeployment-idAudioSpeechPost200ApplicationOctet-streamResponse": {
      "format": "binary",
      "type": "string"
    }
  },
  "tags": []
}